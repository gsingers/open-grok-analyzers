/* The following code was generated by JFlex 1.6.1 */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
 */

/*
 * Cross reference a Python file
 */

package com.grantingersoll.opengrok.analysis.python;
import com.grantingersoll.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import com.grantingersoll.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/grantingersoll/projects/OpenGrok/src/org/opensolaris/opengrok/analysis/python/PythonXref.lex</tt>
 */
public class PythonXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int LSTRING = 4;
  public static final int SCOMMENT = 6;
  public static final int QSTRING = 8;
  public static final int LQSTRING = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\6\1\41"+
    "\1\43\2\6\1\45\1\42\2\46\1\6\1\35\1\6\1\10\1\11"+
    "\1\31\1\32\11\5\1\51\1\6\1\37\1\6\1\40\1\6\1\52"+
    "\1\30\1\33\1\15\1\27\1\34\1\20\1\4\1\23\1\26\1\36"+
    "\1\4\1\24\1\14\1\17\1\16\1\12\2\4\1\50\1\21\3\4"+
    "\1\22\1\13\1\4\1\46\1\44\2\46\1\7\1\46\1\30\1\33"+
    "\1\15\1\27\1\34\1\20\1\4\1\23\1\26\1\36\1\4\1\24"+
    "\1\14\1\17\1\16\1\12\2\4\1\50\1\21\3\4\1\22\1\13"+
    "\1\4\3\46\1\6\261\0\2\25\115\0\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ufe90\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\2\2\14"+
    "\5\4\1\6\1\15\2\4\1\16\2\4\1\17\1\0"+
    "\1\5\1\0\1\5\14\0\1\20\1\21\3\0\1\22"+
    "\1\0\2\5\1\0\1\5\3\0\1\23\1\24\14\0"+
    "\1\2\1\25\1\26\1\5\11\0\1\27\11\0\1\30"+
    "\20\0\2\27\1\0\1\31\2\0\1\32\11\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0102\0\u0183\0\u01ae\0\u0102\0\u01d9\0\u0204\0\u0102"+
    "\0\u022f\0\u025a\0\u0102\0\u0102\0\u0285\0\u02b0\0\u0102\0\u02db"+
    "\0\u0306\0\u0331\0\u035c\0\u0387\0\u0102\0\u0102\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u045e\0\u0183\0\u0489\0\u04b4\0\u04df\0\u050a"+
    "\0\u0535\0\u0560\0\u058b\0\u05b6\0\u02db\0\u05e1\0\u060c\0\u0637"+
    "\0\u0306\0\u0662\0\u068d\0\u06b8\0\u0102\0\u0102\0\u06e3\0\u070e"+
    "\0\u0739\0\u0102\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\u0102\0\u0102\0\u08bc\0\u08e7\0\u0912\0\u093d"+
    "\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95"+
    "\0\u0102\0\u0102\0\u0102\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u02db\0\u0c6e\0\u0c99"+
    "\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49"+
    "\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1"+
    "\0\u0cef\0\u0102\0\u10cc\0\u0e1c\0\u10f7\0\u1122\0\u0102\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5"+
    "\0\u12a5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\2\15\13\13\1\7\3\13\1\15\1\16\2\13\1\15"+
    "\1\13\1\17\1\20\1\21\1\22\1\23\1\15\1\24"+
    "\1\15\1\7\1\13\2\15\1\7\1\25\1\26\1\27"+
    "\1\30\1\31\1\15\3\31\6\30\1\32\2\30\1\33"+
    "\1\30\1\7\3\30\1\34\1\31\2\30\1\15\1\30"+
    "\1\35\1\20\1\36\2\15\1\37\1\24\1\15\1\7"+
    "\1\30\2\15\1\7\1\10\1\11\1\12\1\30\1\31"+
    "\1\15\3\31\6\30\1\32\2\30\1\33\1\30\1\7"+
    "\3\30\1\34\1\31\2\30\1\15\1\30\1\35\1\20"+
    "\1\40\2\15\1\37\1\24\1\15\1\7\1\30\2\15"+
    "\1\7\1\25\1\26\1\27\1\30\1\31\1\15\3\31"+
    "\6\30\1\32\2\30\1\33\1\30\1\7\3\30\1\34"+
    "\1\31\2\30\1\15\1\30\1\35\1\20\4\15\1\24"+
    "\1\15\1\7\1\30\2\15\1\7\1\25\1\26\1\27"+
    "\1\30\1\31\1\15\3\31\6\30\1\32\2\30\1\33"+
    "\1\30\1\7\3\30\1\34\1\31\2\30\1\15\1\30"+
    "\1\35\1\20\1\15\1\41\1\15\1\42\1\24\1\15"+
    "\1\7\1\30\2\15\1\7\1\10\1\11\1\12\1\30"+
    "\1\31\1\15\3\31\6\30\1\32\2\30\1\33\1\30"+
    "\1\7\3\30\1\34\1\31\2\30\1\15\1\30\1\35"+
    "\1\20\1\15\1\43\1\15\1\42\1\24\1\15\1\7"+
    "\1\30\2\15\54\0\1\10\1\11\1\12\52\0\1\12"+
    "\53\0\2\44\1\0\1\44\2\0\13\44\1\0\3\44"+
    "\1\0\3\44\1\0\1\44\11\0\1\44\7\0\1\14"+
    "\3\0\1\45\4\0\1\46\3\0\1\46\1\0\1\46"+
    "\5\0\1\14\1\46\1\47\1\0\1\46\21\0\1\14"+
    "\3\0\1\45\4\0\1\46\3\0\1\50\1\0\1\46"+
    "\5\0\1\14\1\46\1\47\1\0\1\46\20\0\1\51"+
    "\5\0\13\51\1\0\3\51\1\52\1\0\2\51\1\0"+
    "\1\51\11\0\1\51\43\0\1\53\53\0\1\54\11\0"+
    "\1\25\1\26\1\27\52\0\1\27\53\0\2\55\1\0"+
    "\2\55\1\56\13\55\1\0\3\55\1\57\3\55\1\0"+
    "\1\55\11\0\1\55\1\0\1\60\4\0\2\61\1\0"+
    "\16\61\1\0\3\61\1\0\3\61\1\0\1\61\11\0"+
    "\1\61\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\7\55\1\62\3\55\1\0\3\55\1\57\3\55\1\0"+
    "\1\55\11\0\1\55\1\0\1\60\4\0\2\55\1\0"+
    "\2\55\1\56\7\55\1\63\3\55\1\0\3\55\1\57"+
    "\3\55\1\0\1\55\11\0\1\55\1\0\1\60\4\0"+
    "\1\64\5\0\13\64\1\0\3\64\2\0\2\64\1\0"+
    "\1\64\11\0\1\64\43\0\1\65\2\0\1\66\7\0"+
    "\1\67\37\0\1\70\12\0\1\71\113\0\1\72\1\0"+
    "\1\66\7\0\1\71\40\0\1\73\15\0\1\74\24\0"+
    "\1\74\36\0\1\46\3\0\1\46\1\0\1\46\6\0"+
    "\1\46\2\0\1\46\21\0\1\75\2\0\1\76\21\0"+
    "\1\75\2\0\1\76\22\0\1\77\7\0\1\77\1\46"+
    "\1\0\1\77\1\0\1\46\1\0\1\46\2\0\2\77"+
    "\1\0\3\77\1\0\1\46\20\0\2\51\1\0\2\51"+
    "\1\100\13\51\1\0\3\51\1\101\3\51\1\0\1\51"+
    "\11\0\1\51\6\0\1\102\5\0\13\102\1\0\3\102"+
    "\2\0\2\102\1\0\1\102\11\0\1\102\43\0\1\103"+
    "\53\0\1\104\14\0\2\55\1\0\2\55\1\56\1\105"+
    "\2\55\1\106\3\55\1\107\1\110\1\111\1\55\1\112"+
    "\1\113\1\114\1\55\1\57\3\55\1\0\1\55\11\0"+
    "\1\55\1\0\1\60\4\0\1\115\5\0\13\115\1\0"+
    "\3\115\2\0\2\115\1\0\1\115\11\0\1\115\6\0"+
    "\2\116\1\0\16\116\1\0\3\116\1\0\3\116\1\0"+
    "\1\116\11\0\1\116\6\0\2\55\1\0\2\55\1\56"+
    "\1\117\12\55\1\0\3\55\1\57\3\55\1\0\1\55"+
    "\11\0\1\55\1\0\1\60\4\0\2\55\1\0\2\55"+
    "\1\56\7\55\1\120\3\55\1\0\3\55\1\57\3\55"+
    "\1\0\1\55\11\0\1\55\1\0\1\60\4\0\2\64"+
    "\1\0\16\64\1\0\3\64\1\57\3\64\1\0\1\64"+
    "\11\0\1\64\3\0\1\67\37\0\1\121\52\0\1\122"+
    "\12\0\1\71\40\0\1\121\52\0\1\123\15\0\1\74"+
    "\10\0\1\46\3\0\1\46\1\0\1\46\5\0\1\74"+
    "\1\46\1\47\1\0\1\46\21\0\1\75\10\0\1\46"+
    "\3\0\1\46\1\0\1\46\5\0\1\75\1\46\2\0"+
    "\1\46\21\0\1\75\24\0\1\75\25\0\1\77\7\0"+
    "\1\77\1\46\1\0\1\77\1\0\1\46\1\0\1\46"+
    "\2\0\2\77\1\0\2\77\1\124\1\0\1\46\20\0"+
    "\2\51\1\0\2\51\1\100\1\125\2\51\1\126\3\51"+
    "\1\127\1\130\1\131\1\51\1\132\1\133\1\134\1\51"+
    "\1\101\3\51\1\0\1\51\11\0\1\51\6\0\1\135"+
    "\5\0\13\135\1\0\3\135\2\0\2\135\1\0\1\135"+
    "\11\0\1\135\6\0\2\102\1\0\16\102\1\0\3\102"+
    "\1\101\3\102\1\0\1\102\11\0\1\102\6\0\2\55"+
    "\1\0\2\55\1\56\1\55\2\136\10\55\1\0\2\55"+
    "\1\137\1\57\3\55\1\0\1\55\11\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\4\55\1\140"+
    "\6\55\1\0\3\55\1\57\3\55\1\0\1\55\11\0"+
    "\1\55\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\10\55\1\141\2\55\1\0\3\55\1\57\3\55\1\0"+
    "\1\55\11\0\1\55\1\0\1\60\4\0\2\55\1\0"+
    "\2\55\1\56\2\55\1\142\10\55\1\0\3\55\1\57"+
    "\3\55\1\0\1\55\11\0\1\55\1\0\1\60\4\0"+
    "\2\55\1\0\2\55\1\56\7\55\1\143\3\55\1\0"+
    "\3\55\1\57\3\55\1\0\1\55\11\0\1\55\1\0"+
    "\1\60\17\0\1\144\37\0\2\55\1\0\2\55\1\56"+
    "\5\55\1\145\5\55\1\0\3\55\1\57\3\55\1\0"+
    "\1\55\11\0\1\55\1\0\1\60\4\0\2\55\1\0"+
    "\2\55\1\56\13\55\1\146\1\147\2\55\1\57\3\55"+
    "\1\0\1\55\11\0\1\55\1\0\1\60\4\0\2\150"+
    "\1\0\3\115\13\150\1\0\3\150\1\0\3\150\1\0"+
    "\1\150\11\0\1\150\6\0\2\116\1\0\2\116\1\151"+
    "\13\116\1\0\3\116\1\0\3\116\1\0\1\116\11\0"+
    "\1\116\6\0\2\55\1\0\2\55\1\56\13\55\1\0"+
    "\3\55\1\57\3\55\1\0\1\55\11\0\1\55\1\152"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\1\153\12\55"+
    "\1\0\3\55\1\57\3\55\1\0\1\55\11\0\1\55"+
    "\1\0\1\60\5\0\1\77\2\0\1\76\4\0\1\77"+
    "\1\46\1\0\1\77\1\0\1\46\1\0\1\46\2\0"+
    "\2\77\1\0\2\77\1\124\1\76\1\46\20\0\2\51"+
    "\1\0\2\51\1\100\1\51\2\154\10\51\1\0\2\51"+
    "\1\155\1\101\3\51\1\0\1\51\11\0\1\51\6\0"+
    "\2\51\1\0\2\51\1\100\4\51\1\156\6\51\1\0"+
    "\3\51\1\101\3\51\1\0\1\51\11\0\1\51\6\0"+
    "\2\51\1\0\2\51\1\100\10\51\1\157\2\51\1\0"+
    "\3\51\1\101\3\51\1\0\1\51\11\0\1\51\6\0"+
    "\2\51\1\0\2\51\1\100\2\51\1\160\10\51\1\0"+
    "\3\51\1\101\3\51\1\0\1\51\11\0\1\51\6\0"+
    "\2\51\1\0\2\51\1\100\7\51\1\161\3\51\1\0"+
    "\3\51\1\101\3\51\1\0\1\51\11\0\1\51\21\0"+
    "\1\162\37\0\2\51\1\0\2\51\1\100\5\51\1\163"+
    "\5\51\1\0\3\51\1\101\3\51\1\0\1\51\11\0"+
    "\1\51\6\0\2\51\1\0\2\51\1\100\13\51\1\164"+
    "\1\165\2\51\1\101\3\51\1\0\1\51\11\0\1\51"+
    "\6\0\2\166\1\0\3\135\13\166\1\0\3\166\1\0"+
    "\3\166\1\0\1\166\11\0\1\166\6\0\2\55\1\0"+
    "\2\55\1\56\7\55\1\167\3\55\1\0\3\55\1\57"+
    "\3\55\1\0\1\55\11\0\1\55\1\0\1\60\4\0"+
    "\2\55\1\0\2\55\1\56\5\55\1\170\5\55\1\0"+
    "\3\55\1\57\3\55\1\0\1\55\11\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\7\55\1\136"+
    "\3\55\1\0\3\55\1\57\3\55\1\0\1\55\11\0"+
    "\1\55\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\12\55\1\136\1\0\3\55\1\57\3\55\1\0\1\55"+
    "\11\0\1\55\1\0\1\60\4\0\2\55\1\0\2\55"+
    "\1\56\2\55\1\171\10\55\1\0\3\55\1\57\3\55"+
    "\1\0\1\55\11\0\1\55\1\0\1\60\25\0\2\172"+
    "\30\0\2\55\1\0\2\55\1\56\13\55\1\172\1\136"+
    "\2\55\1\57\3\55\1\0\1\55\11\0\1\55\1\0"+
    "\1\60\20\0\1\173\36\0\2\55\1\0\2\55\1\56"+
    "\6\55\1\170\4\55\1\0\3\55\1\57\3\55\1\0"+
    "\1\55\11\0\1\55\1\0\1\60\4\0\2\150\1\0"+
    "\3\115\13\150\1\0\3\150\1\57\3\150\1\0\1\150"+
    "\11\0\1\150\6\0\2\174\1\0\16\174\1\0\3\174"+
    "\1\0\3\174\1\0\1\174\11\0\1\174\33\0\1\175"+
    "\25\0\2\55\1\0\2\55\1\56\13\55\1\0\3\55"+
    "\1\57\3\55\1\0\1\55\10\0\1\176\1\117\1\152"+
    "\1\60\4\0\2\51\1\0\2\51\1\100\13\51\1\0"+
    "\3\51\1\101\3\51\1\0\1\51\1\0\1\177\7\0"+
    "\1\51\6\0\2\51\1\0\2\51\1\100\7\51\1\200"+
    "\3\51\1\0\3\51\1\101\3\51\1\0\1\51\11\0"+
    "\1\51\6\0\2\51\1\0\2\51\1\100\5\51\1\201"+
    "\5\51\1\0\3\51\1\101\3\51\1\0\1\51\11\0"+
    "\1\51\6\0\2\51\1\0\2\51\1\100\7\51\1\154"+
    "\3\51\1\0\3\51\1\101\3\51\1\0\1\51\11\0"+
    "\1\51\6\0\2\51\1\0\2\51\1\100\12\51\1\154"+
    "\1\0\3\51\1\101\3\51\1\0\1\51\11\0\1\51"+
    "\6\0\2\51\1\0\2\51\1\100\2\51\1\202\10\51"+
    "\1\0\3\51\1\101\3\51\1\0\1\51\11\0\1\51"+
    "\27\0\2\203\30\0\2\51\1\0\2\51\1\100\13\51"+
    "\1\203\1\154\2\51\1\101\3\51\1\0\1\51\11\0"+
    "\1\51\22\0\1\204\36\0\2\51\1\0\2\51\1\100"+
    "\6\51\1\201\4\51\1\0\3\51\1\101\3\51\1\0"+
    "\1\51\11\0\1\51\6\0\2\166\1\0\3\135\13\166"+
    "\1\0\3\166\1\101\3\166\1\0\1\166\1\0\1\177"+
    "\7\0\1\166\6\0\2\55\1\0\2\55\1\56\3\55"+
    "\1\205\7\55\1\0\3\55\1\57\3\55\1\0\1\55"+
    "\11\0\1\55\1\0\1\60\4\0\2\55\1\0\2\55"+
    "\1\56\6\55\1\136\4\55\1\0\3\55\1\57\3\55"+
    "\1\0\1\55\11\0\1\55\1\0\1\60\20\0\1\172"+
    "\63\0\1\206\72\0\1\152\5\0\2\51\1\0\2\51"+
    "\1\100\3\51\1\207\7\51\1\0\3\51\1\101\3\51"+
    "\1\0\1\51\11\0\1\51\6\0\2\51\1\0\2\51"+
    "\1\100\6\51\1\154\4\51\1\0\3\51\1\101\3\51"+
    "\1\0\1\51\11\0\1\51\6\0\2\51\1\0\2\51"+
    "\1\100\12\51\1\154\1\0\3\51\1\101\3\51\1\0"+
    "\1\51\1\0\1\177\7\0\1\51\42\0\1\177\32\0"+
    "\1\203\36\0\2\55\1\0\2\55\1\56\11\55\1\136"+
    "\1\55\1\0\3\55\1\57\3\55\1\0\1\55\11\0"+
    "\1\55\1\0\1\60\4\0\21\210\1\0\11\210\5\0"+
    "\2\210\2\0\3\210\4\0\2\51\1\0\2\51\1\100"+
    "\11\51\1\154\1\51\1\0\3\51\1\101\3\51\1\0"+
    "\1\51\11\0\1\51\6\0\2\211\4\210\13\211\1\0"+
    "\7\211\1\210\1\211\5\0\2\210\2\0\1\211\2\210";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4816];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\2\11\2\1\1\11\5\1\2\11\6\1\1\0"+
    "\1\1\1\0\1\1\14\0\2\11\3\0\1\11\1\0"+
    "\2\1\1\0\1\1\3\0\2\11\14\0\3\11\1\1"+
    "\11\0\1\1\11\0\1\1\20\0\1\1\1\11\1\0"+
    "\1\1\2\0\1\11\11\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PythonXref(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { writeUnicodeChar(yycharat(0));
            }
          case 28: break;
          case 2: 
            { out.write(yytext());
            }
          case 29: break;
          case 3: 
            { startNewLine();
            }
          case 30: break;
          case 4: 
            { out.write(yycharat(0));
            }
          case 31: break;
          case 5: 
            { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
            }
          case 32: break;
          case 6: 
            { out.write( "&lt;");
            }
          case 33: break;
          case 7: 
            { out.write( "&gt;");
            }
          case 34: break;
          case 8: 
            { yybegin(STRING);out.write("<span class=\"s\">\"");
            }
          case 35: break;
          case 9: 
            { yybegin(QSTRING);out.write("<span class=\"s\">\'");
            }
          case 36: break;
          case 10: 
            { yybegin(SCOMMENT);out.write("<span class=\"c\">#");
            }
          case 37: break;
          case 11: 
            { out.write( "&amp;");
            }
          case 38: break;
          case 12: 
            { yybegin(YYINITIAL); out.write("</span>");
    startNewLine();
            }
          case 39: break;
          case 13: 
            { yybegin(YYINITIAL); out.write("\"</span>");
            }
          case 40: break;
          case 14: 
            { yybegin(YYINITIAL); out.write("'</span>");
            }
          case 41: break;
          case 15: 
            { String id = yytext();
    writeSymbol(id, Consts.kwd, yyline);
            }
          case 42: break;
          case 16: 
            { out.write("\\\"");
            }
          case 43: break;
          case 17: 
            { out.write("\\\\");
            }
          case 44: break;
          case 18: 
            { out.write("\\\'");
            }
          case 45: break;
          case 19: 
            { yybegin(LSTRING);out.write("<span class=\"s\">\"\"\"");
            }
          case 46: break;
          case 20: 
            { yybegin(LQSTRING);out.write("<span class=\"s\">\'\'\'");
            }
          case 47: break;
          case 21: 
            { yybegin(YYINITIAL); out.write("\"\"\"</span>");
            }
          case 48: break;
          case 22: 
            { yybegin(YYINITIAL); out.write("'''</span>");
            }
          case 49: break;
          case 23: 
            { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
            }
          case 50: break;
          case 24: 
            { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
            }
          case 51: break;
          case 25: 
            { writeEMailAddress(yytext());
            }
          case 52: break;
          case 26: 
            { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
            }
          case 53: break;
          case 27: 
            { String url = yytext();
         out.write("<a href=\"");
         out.write(url);out.write("\">");
         out.write(url);out.write("</a>");
            }
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
