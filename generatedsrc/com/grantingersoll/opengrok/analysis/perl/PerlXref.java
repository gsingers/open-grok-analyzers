/* The following code was generated by JFlex 1.6.1 */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2010, 2015, Oracle and/or its affiliates. All rights reserved.
 */

/*
 * Cross reference a Perl file
 */

package com.grantingersoll.opengrok.analysis.perl;
import com.grantingersoll.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import com.grantingersoll.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/grantingersoll/projects/OpenGrok/src/org/opensolaris/opengrok/analysis/perl/PerlXref.lex</tt>
 */
public class PerlXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SCOMMENT = 4;
  public static final int QSTRING = 6;
  public static final int POD = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\6\1\52"+
    "\1\54\1\45\1\45\1\47\1\53\2\56\1\6\1\35\1\6\1\10"+
    "\1\11\1\32\1\33\1\42\1\42\7\5\1\61\1\6\1\50\1\36"+
    "\1\51\1\6\1\46\1\31\1\34\1\17\1\30\1\14\1\22\1\41"+
    "\1\25\1\27\1\4\1\40\1\13\1\16\1\21\1\20\1\12\1\4"+
    "\1\15\1\60\1\23\1\44\1\43\1\4\1\24\2\4\1\56\1\55"+
    "\2\56\1\7\1\56\1\31\1\34\1\17\1\30\1\14\1\22\1\41"+
    "\1\25\1\27\1\4\1\40\1\13\1\16\1\21\1\20\1\12\1\4"+
    "\1\15\1\60\1\23\1\44\1\43\1\4\1\24\2\4\3\56\1\6"+
    "\6\0\1\0\252\0\2\26\115\0\1\57\u1ea8\0\1\0\1\0\u0100\0"+
    "\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\2\3\1\4\1\5\1\4\1\5"+
    "\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\4"+
    "\1\2\2\14\5\4\1\6\1\7\1\15\1\4\1\16"+
    "\2\4\1\17\1\5\25\0\1\20\1\21\1\0\1\22"+
    "\1\0\2\5\1\0\1\5\1\23\26\0\1\2\1\0"+
    "\1\5\11\0\1\24\4\0\1\25\12\0\1\26\24\0"+
    "\2\25\1\0\1\27\2\0\2\30\1\31\7\0\1\32"+
    "\2\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u015e\0\u01f4\0\u0226\0\u015e\0\u0258\0\u028a"+
    "\0\u028a\0\u02bc\0\u015e\0\u015e\0\u015e\0\u015e\0\u02ee\0\u0320"+
    "\0\u0352\0\u015e\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u015e"+
    "\0\u015e\0\u015e\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u01f4\0\u0546"+
    "\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0384\0\u0802\0\u0834"+
    "\0\u0866\0\u03b6\0\u0898\0\u08ca\0\u08fc\0\u015e\0\u015e\0\u092e"+
    "\0\u015e\0\u0960\0\u0992\0\u09c4\0\u09c4\0\u09f6\0\u060e\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u015e\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036"+
    "\0\u1068\0\u015e\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u0384\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482"+
    "\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612"+
    "\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u122a\0\u015e"+
    "\0\u1770\0\u1388\0\u17a2\0\u17d4\0\u1806\0\u015e\0\u015e\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u015e\0\u1996"+
    "\0\u19c8\0\u19c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\14"+
    "\2\16\14\14\1\10\3\14\1\16\1\17\1\14\2\16"+
    "\1\10\2\14\1\15\2\14\2\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\16\1\10\1\14\1\16\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\14\2\16"+
    "\14\14\1\10\3\14\1\16\1\17\1\14\1\16\1\27"+
    "\1\10\2\14\1\15\2\14\2\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\16\1\10\1\14\1\16\1\10"+
    "\1\30\1\31\1\32\1\33\1\34\1\16\3\34\10\33"+
    "\1\35\2\33\1\36\1\10\3\33\1\37\1\34\1\33"+
    "\2\16\1\10\2\33\1\34\2\33\2\16\1\40\1\41"+
    "\1\23\1\42\2\16\1\43\1\16\1\10\1\33\1\16"+
    "\1\10\1\30\1\31\1\32\1\33\1\34\1\16\3\34"+
    "\10\33\1\35\2\33\1\36\1\10\3\33\1\37\1\34"+
    "\1\33\2\16\1\10\2\33\1\34\2\33\2\16\1\40"+
    "\1\41\1\23\5\16\1\10\1\33\1\16\1\10\1\30"+
    "\1\31\1\32\1\33\1\34\1\16\3\34\10\33\1\35"+
    "\2\33\1\36\1\10\3\33\1\37\1\34\1\33\2\16"+
    "\1\10\2\33\1\34\2\33\2\16\1\40\1\41\1\23"+
    "\1\16\1\44\1\16\1\45\1\16\1\10\1\33\1\16"+
    "\1\10\1\11\1\12\1\13\1\33\1\34\1\16\3\34"+
    "\10\33\1\35\2\33\1\36\1\10\3\33\1\37\1\34"+
    "\1\33\2\16\1\10\2\33\1\34\2\33\2\16\1\40"+
    "\1\41\1\23\5\16\1\10\1\33\1\16\1\10\1\11"+
    "\1\12\1\13\1\33\1\34\1\16\3\34\10\33\1\35"+
    "\2\33\1\36\1\10\3\33\1\37\1\34\1\33\1\16"+
    "\1\46\1\10\2\33\1\34\2\33\2\16\1\40\1\41"+
    "\1\23\5\16\1\10\1\33\1\16\63\0\1\11\1\12"+
    "\1\13\61\0\1\13\62\0\2\47\1\0\1\47\2\0"+
    "\14\47\1\0\3\47\1\0\2\47\3\0\5\47\13\0"+
    "\1\47\6\0\1\15\1\0\1\50\1\0\1\51\2\0"+
    "\1\52\16\0\1\15\6\0\1\15\24\0\1\15\1\0"+
    "\1\50\1\0\1\51\2\0\1\52\7\0\1\53\6\0"+
    "\1\15\6\0\1\15\23\0\1\54\2\0\1\54\2\0"+
    "\14\54\1\0\3\54\2\0\1\54\3\0\2\54\1\0"+
    "\2\54\13\0\1\54\5\0\1\55\5\0\14\55\1\0"+
    "\3\55\1\56\1\0\1\55\3\0\2\55\1\0\2\55"+
    "\13\0\1\55\13\0\1\57\1\0\1\60\3\0\1\61"+
    "\1\0\1\62\2\0\1\63\2\64\4\0\1\65\26\0"+
    "\1\30\1\31\1\32\61\0\1\32\62\0\2\66\1\0"+
    "\2\66\1\67\14\66\1\0\3\66\1\70\2\66\3\0"+
    "\5\66\1\0\1\71\11\0\1\66\5\0\2\72\1\0"+
    "\17\72\1\0\3\72\1\0\2\72\3\0\5\72\1\0"+
    "\1\71\11\0\1\72\5\0\2\66\1\0\2\66\1\67"+
    "\11\66\1\73\2\66\1\0\3\66\1\70\2\66\3\0"+
    "\5\66\1\0\1\71\11\0\1\66\5\0\2\66\1\0"+
    "\2\66\1\67\11\66\1\74\2\66\1\0\3\66\1\70"+
    "\2\66\3\0\5\66\1\0\1\71\11\0\1\66\5\0"+
    "\1\75\5\0\14\75\1\0\3\75\2\0\1\75\3\0"+
    "\2\75\1\0\2\75\13\0\1\75\53\0\1\76\2\0"+
    "\1\77\5\0\1\100\133\0\1\101\1\0\1\77\23\0"+
    "\1\102\47\0\1\50\1\0\1\50\4\0\1\52\16\0"+
    "\1\50\6\0\1\50\24\0\1\103\25\0\1\103\6\0"+
    "\1\103\24\0\1\104\2\0\1\105\22\0\1\104\1\0"+
    "\1\105\4\0\1\104\24\0\1\106\6\0\1\106\2\0"+
    "\1\106\2\0\1\106\5\0\2\106\1\0\2\106\5\0"+
    "\1\106\23\0\2\107\1\0\1\107\2\0\14\107\1\0"+
    "\3\107\1\0\2\107\3\0\5\107\13\0\1\107\5\0"+
    "\2\55\1\0\2\55\1\110\14\55\1\0\3\55\1\111"+
    "\2\55\3\0\5\55\13\0\1\55\5\0\1\112\5\0"+
    "\14\112\1\0\3\112\2\0\1\112\3\0\2\112\1\0"+
    "\2\112\13\0\1\112\21\0\1\113\62\0\1\113\103\0"+
    "\1\114\36\0\1\115\55\0\1\116\70\0\1\117\52\0"+
    "\1\120\14\0\1\121\34\0\2\66\1\0\2\66\1\67"+
    "\1\122\4\66\1\123\3\66\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\66\1\70\2\66\3\0\5\66\1\0"+
    "\1\71\11\0\1\66\5\0\1\132\5\0\14\132\1\0"+
    "\3\132\2\0\1\132\3\0\2\132\1\0\2\132\13\0"+
    "\1\132\5\0\2\133\1\0\17\133\1\0\3\133\1\0"+
    "\2\133\3\0\5\133\13\0\1\133\5\0\2\66\1\0"+
    "\2\66\1\67\1\134\13\66\1\0\3\66\1\70\2\66"+
    "\3\0\5\66\1\0\1\71\11\0\1\66\5\0\2\66"+
    "\1\0\2\66\1\67\11\66\1\135\2\66\1\0\3\66"+
    "\1\70\2\66\3\0\5\66\1\0\1\71\11\0\1\66"+
    "\5\0\2\75\1\0\17\75\1\0\3\75\1\70\2\75"+
    "\3\0\5\75\13\0\1\75\2\0\1\100\51\0\1\136"+
    "\52\0\1\137\22\0\1\103\6\0\1\52\16\0\1\103"+
    "\6\0\1\103\24\0\1\104\25\0\1\104\6\0\1\104"+
    "\24\0\1\106\6\0\1\140\2\0\1\106\2\0\1\106"+
    "\5\0\2\106\1\0\2\106\5\0\1\106\23\0\2\55"+
    "\1\0\2\55\1\110\1\141\4\55\1\142\3\55\1\143"+
    "\1\144\1\145\1\146\1\147\1\150\1\55\1\111\2\55"+
    "\3\0\5\55\13\0\1\55\5\0\1\151\5\0\14\151"+
    "\1\0\3\151\2\0\1\151\3\0\2\151\1\0\2\151"+
    "\13\0\1\151\5\0\2\112\1\0\17\112\1\0\3\112"+
    "\1\111\2\112\3\0\5\112\13\0\1\112\31\0\1\152"+
    "\45\0\1\115\62\0\1\152\75\0\1\153\44\0\1\154"+
    "\106\0\1\155\37\0\1\156\46\0\2\66\1\0\2\66"+
    "\1\67\1\66\1\157\1\160\1\66\1\157\7\66\1\0"+
    "\2\66\1\161\1\70\2\66\3\0\5\66\1\0\1\71"+
    "\11\0\1\66\5\0\2\66\1\0\2\66\1\67\6\66"+
    "\1\162\5\66\1\0\3\66\1\70\2\66\3\0\5\66"+
    "\1\0\1\71\11\0\1\66\5\0\2\66\1\0\2\66"+
    "\1\67\12\66\1\163\1\66\1\0\3\66\1\70\2\66"+
    "\3\0\5\66\1\0\1\71\11\0\1\66\5\0\2\66"+
    "\1\0\2\66\1\67\4\66\1\164\7\66\1\0\3\66"+
    "\1\70\2\66\3\0\5\66\1\0\1\71\11\0\1\66"+
    "\5\0\2\66\1\0\2\66\1\67\11\66\1\165\2\66"+
    "\1\0\3\66\1\70\2\66\3\0\5\66\1\0\1\71"+
    "\11\0\1\66\22\0\1\166\44\0\2\66\1\0\2\66"+
    "\1\67\7\66\1\167\4\66\1\0\3\66\1\70\2\66"+
    "\3\0\5\66\1\0\1\71\11\0\1\66\5\0\2\66"+
    "\1\0\2\66\1\67\14\66\1\170\1\171\2\66\1\70"+
    "\2\66\3\0\5\66\1\0\1\71\11\0\1\66\5\0"+
    "\2\172\1\0\3\132\14\172\1\0\3\172\1\0\2\172"+
    "\3\0\5\172\13\0\1\172\5\0\2\133\1\0\2\133"+
    "\1\173\14\133\1\0\3\133\1\0\2\133\3\0\5\133"+
    "\13\0\1\133\5\0\2\66\1\0\2\66\1\67\14\66"+
    "\1\0\3\66\1\70\2\66\3\0\5\66\1\0\1\71"+
    "\11\0\1\66\1\174\4\0\2\66\1\0\2\66\1\67"+
    "\1\175\13\66\1\0\3\66\1\70\2\66\3\0\5\66"+
    "\1\0\1\71\11\0\1\66\24\0\1\176\43\0\1\106"+
    "\2\0\1\105\3\0\1\140\2\0\1\106\2\0\1\106"+
    "\5\0\2\106\1\0\2\106\1\105\4\0\1\106\23\0"+
    "\2\55\1\0\2\55\1\110\1\55\1\177\1\200\1\55"+
    "\1\177\7\55\1\0\2\55\1\201\1\111\2\55\3\0"+
    "\5\55\13\0\1\55\5\0\2\55\1\0\2\55\1\110"+
    "\6\55\1\202\5\55\1\0\3\55\1\111\2\55\3\0"+
    "\5\55\13\0\1\55\5\0\2\55\1\0\2\55\1\110"+
    "\12\55\1\203\1\55\1\0\3\55\1\111\2\55\3\0"+
    "\5\55\13\0\1\55\5\0\2\55\1\0\2\55\1\110"+
    "\4\55\1\204\7\55\1\0\3\55\1\111\2\55\3\0"+
    "\5\55\13\0\1\55\5\0\2\55\1\0\2\55\1\110"+
    "\11\55\1\205\2\55\1\0\3\55\1\111\2\55\3\0"+
    "\5\55\13\0\1\55\22\0\1\206\44\0\2\55\1\0"+
    "\2\55\1\110\7\55\1\207\4\55\1\0\3\55\1\111"+
    "\2\55\3\0\5\55\13\0\1\55\5\0\2\55\1\0"+
    "\2\55\1\110\14\55\1\210\1\211\2\55\1\111\2\55"+
    "\3\0\5\55\13\0\1\55\5\0\2\212\1\0\3\151"+
    "\14\212\1\0\3\212\1\0\2\212\3\0\5\212\13\0"+
    "\1\212\31\0\1\213\47\0\1\152\71\0\2\214\71\0"+
    "\2\152\25\0\2\66\1\0\2\66\1\67\3\66\1\164"+
    "\10\66\1\0\3\66\1\70\2\66\3\0\5\66\1\0"+
    "\1\71\11\0\1\66\5\0\2\66\1\0\2\66\1\67"+
    "\11\66\1\215\2\66\1\0\3\66\1\70\2\66\3\0"+
    "\5\66\1\0\1\71\11\0\1\66\5\0\2\66\1\0"+
    "\2\66\1\67\7\66\1\216\4\66\1\0\3\66\1\70"+
    "\2\66\3\0\5\66\1\0\1\71\11\0\1\66\5\0"+
    "\2\66\1\0\2\66\1\67\11\66\1\157\2\66\1\0"+
    "\3\66\1\70\2\66\3\0\5\66\1\0\1\71\11\0"+
    "\1\66\5\0\2\66\1\0\2\66\1\67\1\66\1\157"+
    "\12\66\1\0\3\66\1\70\2\66\3\0\5\66\1\0"+
    "\1\71\11\0\1\66\5\0\2\66\1\0\2\66\1\67"+
    "\4\66\1\217\7\66\1\0\3\66\1\70\2\66\3\0"+
    "\5\66\1\0\1\71\11\0\1\66\27\0\2\220\36\0"+
    "\2\66\1\0\2\66\1\67\14\66\1\220\1\157\2\66"+
    "\1\70\2\66\3\0\5\66\1\0\1\71\11\0\1\66"+
    "\23\0\1\221\43\0\2\66\1\0\2\66\1\67\10\66"+
    "\1\216\3\66\1\0\3\66\1\70\2\66\3\0\5\66"+
    "\1\0\1\71\11\0\1\66\5\0\2\172\1\0\3\132"+
    "\14\172\1\0\3\172\1\70\2\172\3\0\5\172\13\0"+
    "\1\172\5\0\2\222\1\0\17\222\1\0\3\222\1\0"+
    "\2\222\3\0\5\222\13\0\1\222\33\0\1\223\33\0"+
    "\2\66\1\0\2\66\1\67\14\66\1\0\3\66\1\70"+
    "\2\66\3\0\5\66\1\0\1\71\10\0\1\224\1\134"+
    "\1\174\2\176\1\225\1\226\56\176\4\0\2\55\1\0"+
    "\2\55\1\110\14\55\1\0\3\55\1\111\2\55\3\0"+
    "\5\55\4\0\1\227\6\0\1\55\5\0\2\55\1\0"+
    "\2\55\1\110\3\55\1\204\10\55\1\0\3\55\1\111"+
    "\2\55\3\0\5\55\13\0\1\55\5\0\2\55\1\0"+
    "\2\55\1\110\11\55\1\230\2\55\1\0\3\55\1\111"+
    "\2\55\3\0\5\55\13\0\1\55\5\0\2\55\1\0"+
    "\2\55\1\110\7\55\1\231\4\55\1\0\3\55\1\111"+
    "\2\55\3\0\5\55\13\0\1\55\5\0\2\55\1\0"+
    "\2\55\1\110\11\55\1\177\2\55\1\0\3\55\1\111"+
    "\2\55\3\0\5\55\13\0\1\55\5\0\2\55\1\0"+
    "\2\55\1\110\1\55\1\177\12\55\1\0\3\55\1\111"+
    "\2\55\3\0\5\55\13\0\1\55\5\0\2\55\1\0"+
    "\2\55\1\110\4\55\1\232\7\55\1\0\3\55\1\111"+
    "\2\55\3\0\5\55\13\0\1\55\27\0\2\233\36\0"+
    "\2\55\1\0\2\55\1\110\14\55\1\233\1\177\2\55"+
    "\1\111\2\55\3\0\5\55\13\0\1\55\23\0\1\234"+
    "\43\0\2\55\1\0\2\55\1\110\10\55\1\231\3\55"+
    "\1\0\3\55\1\111\2\55\3\0\5\55\13\0\1\55"+
    "\5\0\2\212\1\0\3\151\14\212\1\0\3\212\1\111"+
    "\2\212\3\0\5\212\4\0\1\227\6\0\1\212\43\0"+
    "\1\152\40\0\1\152\44\0\2\66\1\0\2\66\1\67"+
    "\5\66\1\235\6\66\1\0\3\66\1\70\2\66\3\0"+
    "\5\66\1\0\1\71\11\0\1\66\5\0\2\66\1\0"+
    "\2\66\1\67\10\66\1\157\3\66\1\0\3\66\1\70"+
    "\2\66\3\0\5\66\1\0\1\71\11\0\1\66\23\0"+
    "\1\220\71\0\1\236\110\0\1\174\2\176\1\225\1\237"+
    "\56\176\4\0\2\55\1\0\2\55\1\110\5\55\1\240"+
    "\6\55\1\0\3\55\1\111\2\55\3\0\5\55\13\0"+
    "\1\55\5\0\2\55\1\0\2\55\1\110\10\55\1\177"+
    "\3\55\1\0\3\55\1\111\2\55\3\0\5\55\13\0"+
    "\1\55\5\0\2\55\1\0\2\55\1\110\1\55\1\177"+
    "\12\55\1\0\3\55\1\111\2\55\3\0\5\55\4\0"+
    "\1\227\6\0\1\55\52\0\1\227\32\0\1\233\43\0"+
    "\2\66\1\0\2\66\1\67\13\66\1\157\1\0\3\66"+
    "\1\70\2\66\3\0\5\66\1\0\1\71\11\0\1\66"+
    "\5\0\22\241\1\0\10\241\1\0\10\241\5\0\1\241"+
    "\2\0\2\241\4\0\2\55\1\0\2\55\1\110\13\55"+
    "\1\177\1\0\3\55\1\111\2\55\3\0\5\55\13\0"+
    "\1\55\5\0\2\242\4\241\14\242\1\0\6\242\2\241"+
    "\1\0\5\242\3\241\5\0\1\241\2\0\1\242\1\241";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\2\1\1\11\2\1\1\11\4\1\4\11"+
    "\3\1\1\11\5\1\3\11\6\1\25\0\2\11\1\0"+
    "\1\11\1\0\2\1\1\0\2\1\26\0\1\11\1\0"+
    "\1\1\11\0\1\11\4\0\1\1\12\0\1\1\24\0"+
    "\1\1\1\11\1\0\1\1\2\0\1\1\2\11\7\0"+
    "\1\11\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PerlXref(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { writeUnicodeChar(yycharat(0));
            }
          case 28: break;
          case 2: 
            { out.write(yytext());
            }
          case 29: break;
          case 3: 
            { startNewLine();
            }
          case 30: break;
          case 4: 
            { out.write(yycharat(0));
            }
          case 31: break;
          case 5: 
            { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
            }
          case 32: break;
          case 6: 
            { out.write( "&amp;");
            }
          case 33: break;
          case 7: 
            { out.write( "&lt;");
            }
          case 34: break;
          case 8: 
            { out.write( "&gt;");
            }
          case 35: break;
          case 9: 
            { yybegin(STRING);out.write("<span class=\"s\">\"");
            }
          case 36: break;
          case 10: 
            { yybegin(QSTRING);out.write("<span class=\"s\">\'");
            }
          case 37: break;
          case 11: 
            { yybegin(SCOMMENT);out.write("<span class=\"c\">#");
            }
          case 38: break;
          case 12: 
            { yybegin(YYINITIAL); out.write("</span>");
    startNewLine();
            }
          case 39: break;
          case 13: 
            { yybegin(YYINITIAL); out.write("\"</span>");
            }
          case 40: break;
          case 14: 
            { yybegin(YYINITIAL); out.write("'</span>");
            }
          case 41: break;
          case 15: 
            { String id = yytext();
    writeSymbol(id, Consts.kwd, yyline);
            }
          case 42: break;
          case 16: 
            { out.write("\\\"");
            }
          case 43: break;
          case 17: 
            { out.write("\\\\");
            }
          case 44: break;
          case 18: 
            { out.write("\\\'");
            }
          case 45: break;
          case 19: 
            { //we ignore keywords if the identifier starts with a sigil ...
    String id = yytext().substring(1);
    out.write(yytext().substring(0,1));
    writeSymbol(id, null, yyline);
            }
          case 46: break;
          case 20: 
            { yybegin(POD);out.write("<span class=\"c\">"+yytext());
            }
          case 47: break;
          case 21: 
            { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
            }
          case 48: break;
          case 22: 
            { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
            }
          case 49: break;
          case 23: 
            { writeEMailAddress(yytext());
            }
          case 50: break;
          case 24: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(YYINITIAL); out.write(yytext()+"</span>");
    // without eol lookahead one could perhaps just use below and use yytext().trim() above ?
    //startNewLine();
            }
          case 51: break;
          case 25: 
            { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
            }
          case 52: break;
          case 26: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { yybegin(YYINITIAL); out.write(yytext()+"</span>");
    // without eol lookahead one could perhaps just use below and use yytext().trim() above ?
    //startNewLine();
            }
          case 53: break;
          case 27: 
            { String url = yytext();
         out.write("<a href=\"");
         out.write(url);out.write("\">");
         out.write(url);out.write("</a>");
            }
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
