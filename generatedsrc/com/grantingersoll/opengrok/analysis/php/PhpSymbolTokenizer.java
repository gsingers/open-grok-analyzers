/* The following code was generated by JFlex 1.6.1 */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Gets Php symbols - ignores comments, strings, keywords
 */

package com.grantingersoll.opengrok.analysis.php;
import com.grantingersoll.opengrok.analysis.JFlexTokenizer;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/grantingersoll/projects/OpenGrok/src/com.grantingersoll.opengrok/analysis/php/PhpSymbolTokenizer.lex</tt>
 */
public class PhpSymbolTokenizer extends JFlexTokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_SCRIPT = 2;
  public static final int STRING = 4;
  public static final int SCOMMENT = 6;
  public static final int HEREDOC = 8;
  public static final int NOWDOC = 10;
  public static final int COMMENT = 12;
  public static final int QSTRING = 14;
  public static final int BACKQUOTE = 16;
  public static final int STRINGEXPR = 18;
  public static final int STRINGVAR = 20;
  public static final int DOCCOMMENT = 22;
  public static final int DOCCOM_TYPE_THEN_NAME = 24;
  public static final int DOCCOM_NAME = 26;
  public static final int DOCCOM_TYPE = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  5,  6,  7,  8,  8,  9,  9, 
    10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\0\1\2\22\0\1\1\1\6\1\73"+
    "\1\75\1\56\2\6\1\65\1\71\1\72\1\66\1\42\1\6\1\11"+
    "\1\12\1\32\1\33\1\36\1\37\1\15\1\15\3\37\2\5\1\104"+
    "\1\100\1\43\1\45\1\46\1\44\1\103\1\31\1\35\1\26\1\27"+
    "\1\41\1\30\1\47\1\14\1\24\1\54\1\10\1\22\1\21\1\25"+
    "\1\51\1\13\1\10\1\50\1\17\1\20\1\52\1\70\1\67\1\40"+
    "\1\53\1\10\1\101\1\55\1\102\1\0\1\7\1\74\1\31\1\35"+
    "\1\26\1\27\1\63\1\62\1\47\1\14\1\24\1\54\1\10\1\22"+
    "\1\21\1\61\1\51\1\13\1\10\1\64\1\17\1\60\1\52\1\57"+
    "\1\67\1\40\1\53\1\10\1\76\1\34\1\77\1\6\6\4\1\4"+
    "\252\4\2\23\115\4\1\16\u0f80\4\u0f28\0\1\0\1\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\11\1\1\2\5\1\1\2\3\1\1\3\1\1"+
    "\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12"+
    "\2\1\1\12\11\1\1\13\1\14\5\15\2\1\1\16"+
    "\1\17\1\20\1\16\10\0\1\7\1\1\2\0\1\21"+
    "\4\0\1\22\1\23\12\0\1\1\1\0\1\24\1\25"+
    "\2\26\16\0\1\27\11\0\1\1\1\0\1\30\2\1"+
    "\13\0\2\1\2\0\1\31\1\32\2\0\1\33\21\0"+
    "\1\1\25\0\1\34\10\0\2\1\6\0\2\35\35\0"+
    "\1\36\14\0\1\37\1\1\1\40\13\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u08e5\0\u092a\0\u0450\0\u096f\0\u0450\0\u0450\0\u0450"+
    "\0\u0450\0\u0450\0\u09b4\0\u09f9\0\u0450\0\u0a3e\0\u0a83\0\u0ac8"+
    "\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0"+
    "\0\u0d35\0\u0d7a\0\u0450\0\u0450\0\u0495\0\u04da\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0450\0\u0ed3\0\u0f18\0\u0f5d\0\u051f\0\u0fa2"+
    "\0\u0564\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u078c\0\u120f\0\u1254\0\u1299\0\u08a0\0\u12de\0\u0450"+
    "\0\u1323\0\u096f\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1"+
    "\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u0450\0\u0450\0\u165f"+
    "\0\u0450\0\u0b52\0\u16a4\0\u0b97\0\u0bdc\0\u16e9\0\u172e\0\u1773"+
    "\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b"+
    "\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3"+
    "\0\u1c08\0\u1c4d\0\u1c4d\0\u0450\0\u1254\0\u1299\0\u1c92\0\u1cd7"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u0450\0\u20e2"+
    "\0\u2127\0\u0450\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed"+
    "\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d"+
    "\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u0450\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48"+
    "\0\u2d8d\0\u2dd2\0\u241e\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b"+
    "\0\u2f70\0\u2fb5\0\u2ffa\0\u0450\0\u303f\0\u3084\0\u30c9\0\u310e"+
    "\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e"+
    "\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786"+
    "\0\u37cb\0\u3405\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969"+
    "\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u38df\0\u3924"+
    "\0\u39f3\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea"+
    "\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\2\21\1\24\1\21\1\24\1\25"+
    "\2\24\1\25\1\26\1\24\1\21\4\25\1\21\4\25"+
    "\1\27\1\25\1\30\1\24\1\21\1\25\2\24\2\25"+
    "\1\21\1\31\3\21\6\25\2\21\3\25\1\27\2\25"+
    "\2\21\2\25\15\21\1\22\1\23\1\21\1\32\1\33"+
    "\1\21\2\32\1\34\1\35\2\32\1\33\14\32\1\36"+
    "\1\37\1\21\1\40\2\33\2\32\1\34\1\41\1\42"+
    "\2\21\6\32\1\21\1\43\6\32\1\44\1\21\2\32"+
    "\1\45\1\21\1\46\1\47\1\50\1\51\1\52\6\21"+
    "\1\22\1\23\2\21\1\24\1\21\1\24\1\25\2\24"+
    "\1\25\1\26\1\24\1\21\4\25\1\21\4\25\1\27"+
    "\1\25\1\30\1\24\1\21\1\25\2\24\2\25\5\21"+
    "\6\25\1\53\1\54\3\25\1\27\2\25\2\21\2\25"+
    "\2\21\1\55\2\21\1\56\7\21\1\57\1\60\1\55"+
    "\1\21\1\24\1\21\1\24\1\25\2\24\1\25\1\26"+
    "\1\24\1\21\4\25\1\21\4\25\1\27\1\25\1\30"+
    "\1\24\1\21\1\25\2\24\2\25\2\21\1\42\2\21"+
    "\6\25\2\21\3\25\1\27\2\25\2\21\2\25\15\21"+
    "\1\22\1\23\2\21\1\24\1\21\1\24\1\25\2\24"+
    "\1\25\1\26\1\24\1\21\4\25\1\21\4\25\1\27"+
    "\1\25\1\30\1\24\1\21\1\25\2\24\2\25\5\21"+
    "\6\25\1\61\1\54\3\25\1\27\2\25\2\21\2\25"+
    "\5\21\1\56\7\21\1\22\1\23\1\21\1\62\1\24"+
    "\1\21\1\63\1\64\2\24\1\64\1\65\1\24\1\62"+
    "\4\64\1\62\4\64\1\66\1\64\1\30\1\24\1\21"+
    "\1\64\2\24\2\64\5\21\6\64\1\61\1\54\3\64"+
    "\1\66\2\64\2\21\2\64\5\21\1\56\7\21\1\22"+
    "\1\23\2\21\1\24\1\21\1\24\1\25\2\24\1\25"+
    "\1\26\1\24\1\21\4\25\1\21\4\25\1\27\1\25"+
    "\1\30\1\24\1\21\1\25\2\24\2\25\5\21\6\25"+
    "\2\21\3\25\1\27\2\25\2\21\2\25\15\21\1\22"+
    "\1\23\1\21\1\62\1\24\1\21\1\63\1\64\2\24"+
    "\1\64\1\65\1\24\1\62\4\64\1\62\4\64\1\66"+
    "\1\64\1\30\1\24\1\21\1\64\2\24\2\64\5\21"+
    "\6\64\2\21\3\64\1\66\2\64\2\21\2\64\15\21"+
    "\1\22\1\23\2\21\1\24\1\21\1\24\1\25\2\24"+
    "\1\25\1\26\1\24\1\21\4\25\1\21\4\25\1\27"+
    "\1\25\1\30\1\24\1\21\1\25\2\24\2\25\5\21"+
    "\6\25\2\21\3\25\1\27\2\25\1\21\1\67\2\25"+
    "\15\21\1\22\1\23\2\21\1\24\1\21\1\24\1\25"+
    "\2\24\1\25\1\26\1\24\1\21\4\25\1\21\4\25"+
    "\1\27\1\25\1\30\1\24\1\21\1\25\2\24\2\25"+
    "\5\21\6\25\1\70\1\21\3\25\1\27\2\25\1\55"+
    "\1\21\2\25\15\21\1\22\1\23\2\21\1\24\1\21"+
    "\1\24\1\25\2\24\1\25\1\26\1\24\1\21\4\25"+
    "\1\21\4\25\1\27\1\25\1\30\1\24\1\21\1\25"+
    "\2\24\2\25\5\21\6\25\1\71\1\54\3\25\1\27"+
    "\2\25\2\21\2\25\3\21\1\55\1\21\1\56\7\21"+
    "\1\22\1\23\1\21\1\72\2\21\2\72\2\21\2\72"+
    "\1\21\14\72\3\21\1\72\2\21\2\72\5\21\6\72"+
    "\2\21\6\72\2\21\2\72\6\21\1\55\1\21\1\73"+
    "\3\21\1\74\1\75\1\76\1\74\1\72\2\74\2\72"+
    "\1\77\1\74\2\72\1\74\14\72\3\74\1\72\2\74"+
    "\2\72\5\74\6\72\2\74\6\72\2\74\2\72\10\74"+
    "\1\100\3\74\1\21\1\101\1\23\2\21\1\24\1\21"+
    "\1\24\1\25\2\24\1\25\1\26\1\24\1\21\4\25"+
    "\1\21\4\25\1\27\1\25\1\30\1\24\1\21\1\25"+
    "\2\24\2\25\5\21\6\25\2\21\3\25\1\27\2\25"+
    "\1\21\1\102\2\25\14\21\1\103\1\104\2\103\1\105"+
    "\2\103\2\105\2\103\2\105\1\103\14\105\2\103\1\21"+
    "\1\105\2\103\2\105\5\103\6\105\2\103\6\105\2\103"+
    "\2\105\2\21\6\103\2\21\60\103\1\106\26\103\106\0"+
    "\1\22\1\23\1\21\104\0\1\21\106\0\1\107\1\0"+
    "\7\107\1\0\4\107\1\0\6\107\1\0\1\107\1\0"+
    "\5\107\5\0\6\107\2\0\6\107\2\0\2\107\12\0"+
    "\1\110\6\0\1\111\1\0\3\111\1\112\3\111\1\0"+
    "\4\111\1\0\6\111\1\113\1\111\1\0\5\111\5\0"+
    "\6\111\2\0\6\111\2\0\2\111\12\0\1\110\6\0"+
    "\1\111\1\0\3\111\1\112\3\111\1\0\1\111\1\114"+
    "\2\111\1\0\6\111\1\113\1\111\1\0\5\111\5\0"+
    "\6\111\2\0\1\111\1\114\4\111\2\0\2\111\12\0"+
    "\1\110\6\0\1\111\1\0\3\111\1\112\3\111\1\0"+
    "\1\111\1\115\2\111\1\0\6\111\1\113\1\111\1\0"+
    "\5\111\5\0\6\111\2\0\1\111\1\115\4\111\2\0"+
    "\2\111\12\0\1\110\11\0\1\116\2\0\2\116\2\0"+
    "\4\116\1\0\6\116\3\0\1\116\2\0\2\116\5\0"+
    "\6\116\2\0\6\116\2\0\2\116\60\0\1\117\44\0"+
    "\2\32\1\0\2\32\2\0\17\32\1\0\1\32\1\0"+
    "\5\32\5\0\6\32\2\0\6\32\2\0\2\32\21\0"+
    "\1\33\4\0\1\120\2\0\1\33\15\0\1\33\2\0"+
    "\2\33\1\0\1\121\21\0\1\121\26\0\1\33\4\0"+
    "\1\122\2\0\1\33\15\0\1\37\2\0\2\33\52\0"+
    "\1\120\7\0\1\120\15\0\1\120\2\0\2\120\77\0"+
    "\1\50\33\0\1\123\23\0\1\33\4\0\1\120\2\0"+
    "\1\33\15\0\1\33\2\124\2\33\1\125\1\121\21\0"+
    "\1\121\25\0\2\32\1\0\2\32\2\0\17\32\1\0"+
    "\1\32\1\0\5\32\1\0\1\126\3\0\6\32\2\0"+
    "\6\32\1\44\1\0\2\32\2\0\1\46\54\0\1\127"+
    "\107\0\1\130\42\0\1\131\2\0\2\131\2\0\2\131"+
    "\1\0\14\131\3\0\1\131\2\0\2\131\5\0\6\131"+
    "\2\0\6\131\2\0\2\131\15\0\1\132\14\0\2\133"+
    "\3\0\2\134\2\0\1\135\1\136\1\137\3\0\1\140"+
    "\12\0\1\141\1\142\1\143\7\0\1\136\1\0\1\141"+
    "\35\0\1\144\15\0\1\144\2\0\2\144\1\145\14\0"+
    "\10\21\6\0\1\21\2\0\1\21\104\0\1\146\64\0"+
    "\1\147\27\0\1\57\1\60\1\55\104\0\1\55\116\0"+
    "\1\144\15\0\1\144\2\0\2\144\1\145\14\0\10\21"+
    "\11\0\1\21\10\0\1\150\1\151\2\152\1\0\2\152"+
    "\2\0\17\152\1\0\1\152\1\0\5\152\5\0\6\152"+
    "\2\0\6\152\2\0\2\152\7\0\1\153\6\0\1\150"+
    "\1\151\1\152\1\154\1\0\2\154\2\107\3\154\1\152"+
    "\4\154\1\152\6\154\1\0\1\154\1\0\5\154\5\0"+
    "\6\154\2\0\6\154\2\0\2\154\7\0\1\153\2\0"+
    "\1\110\3\0\1\150\1\151\1\152\1\155\1\0\2\155"+
    "\1\111\1\112\3\155\1\152\4\155\1\152\6\155\1\113"+
    "\1\155\1\0\5\155\5\0\6\155\2\0\6\155\2\0"+
    "\2\155\7\0\1\153\2\0\1\110\3\0\1\150\1\151"+
    "\1\152\1\155\1\0\2\155\1\111\1\112\3\155\1\152"+
    "\1\155\1\156\2\155\1\152\6\155\1\113\1\155\1\0"+
    "\5\155\5\0\6\155\2\0\1\155\1\156\4\155\2\0"+
    "\2\155\7\0\1\153\2\0\1\110\3\0\1\150\1\151"+
    "\1\152\1\155\1\0\2\155\1\111\1\112\3\155\1\152"+
    "\1\155\1\157\2\155\1\152\6\155\1\113\1\155\1\0"+
    "\5\155\5\0\6\155\2\0\1\155\1\157\4\155\2\0"+
    "\2\155\7\0\1\153\2\0\1\110\33\0\1\55\127\0"+
    "\1\21\7\0\1\21\34\0\1\144\15\0\1\144\2\0"+
    "\2\144\1\145\14\0\10\21\7\0\1\21\1\0\1\21"+
    "\12\0\2\72\1\0\2\72\2\0\17\72\1\0\1\72"+
    "\1\0\5\72\5\0\6\72\2\0\6\72\2\0\2\72"+
    "\62\0\1\160\42\0\1\161\1\162\1\0\2\161\1\163"+
    "\1\164\2\161\1\162\14\161\1\0\1\165\1\0\1\161"+
    "\2\162\2\161\1\163\4\0\6\161\1\0\1\166\6\161"+
    "\2\0\2\161\15\0\1\101\1\23\1\21\77\0\1\167"+
    "\33\0\1\55\50\0\1\167\2\0\1\104\107\0\2\105"+
    "\1\0\2\105\2\0\17\105\1\0\1\105\1\0\5\105"+
    "\5\0\6\105\2\0\6\105\2\0\2\105\20\0\1\170"+
    "\2\0\2\170\2\0\2\170\1\0\14\170\3\0\1\170"+
    "\2\0\2\170\5\0\6\170\2\0\6\170\2\0\2\170"+
    "\21\0\1\171\1\0\7\171\1\0\4\171\1\0\6\171"+
    "\1\0\1\171\1\0\5\171\5\0\6\171\2\0\6\171"+
    "\2\0\2\171\21\0\1\111\1\0\3\111\1\112\1\172"+
    "\2\111\1\0\4\111\1\173\1\174\2\111\1\175\2\111"+
    "\1\113\1\111\1\0\5\111\5\0\6\111\2\0\6\111"+
    "\2\0\2\111\12\0\1\110\11\0\1\176\2\0\2\176"+
    "\2\0\4\176\1\0\6\176\3\0\1\176\2\0\2\176"+
    "\5\0\6\176\2\0\6\176\2\0\2\176\21\0\1\111"+
    "\1\0\3\111\1\112\3\111\1\0\1\111\1\177\2\111"+
    "\1\0\6\111\1\113\1\111\1\0\5\111\5\0\6\111"+
    "\2\0\1\111\1\177\4\111\2\0\2\111\12\0\1\110"+
    "\6\0\1\111\1\0\3\111\1\112\1\200\2\111\1\0"+
    "\4\111\1\0\6\111\1\113\1\111\1\0\5\111\5\0"+
    "\6\111\2\0\6\111\2\0\2\111\12\0\1\110\6\0"+
    "\1\116\1\0\7\116\1\0\4\116\1\0\6\116\1\113"+
    "\1\116\1\0\5\116\5\0\6\116\2\0\6\116\2\0"+
    "\2\116\27\0\1\201\31\0\1\51\44\0\1\120\7\0"+
    "\1\120\15\0\1\120\2\0\2\120\1\0\1\121\21\0"+
    "\1\121\26\0\1\202\3\0\1\203\3\0\1\202\15\0"+
    "\1\202\2\0\2\202\2\0\1\203\130\0\1\204\51\0"+
    "\1\205\2\0\1\205\53\0\1\206\7\0\1\206\10\0"+
    "\4\206\1\0\1\206\1\0\3\206\1\0\1\206\20\0"+
    "\2\206\64\0\1\207\45\0\2\131\1\0\2\131\2\0"+
    "\17\131\1\0\1\131\1\0\5\131\5\0\6\131\2\0"+
    "\6\131\2\0\2\131\34\0\1\210\37\0\1\210\51\0"+
    "\1\211\33\0\1\211\74\0\1\212\55\0\1\213\132\0"+
    "\1\214\13\0\1\214\43\0\2\215\24\0\1\216\74\0"+
    "\1\217\21\0\1\217\56\0\1\220\74\0\1\221\33\0"+
    "\1\221\40\0\1\222\15\0\1\222\2\0\2\222\52\0"+
    "\1\223\7\0\1\223\10\0\4\223\1\0\1\223\1\0"+
    "\3\223\1\0\1\223\20\0\2\223\24\0\1\151\103\0"+
    "\1\150\1\151\103\0\1\150\1\151\1\152\1\155\1\0"+
    "\2\155\1\111\1\112\3\155\1\152\1\155\1\224\2\155"+
    "\1\152\6\155\1\113\1\155\1\0\5\155\5\0\6\155"+
    "\2\0\1\155\1\224\4\155\2\0\2\155\7\0\1\153"+
    "\2\0\1\110\3\0\1\150\1\151\1\152\1\155\1\0"+
    "\2\155\1\111\1\112\1\225\2\155\1\152\4\155\1\152"+
    "\6\155\1\113\1\155\1\0\5\155\5\0\6\155\2\0"+
    "\6\155\2\0\2\155\7\0\1\153\2\0\1\110\5\0"+
    "\1\226\2\0\2\226\2\0\2\226\1\0\14\226\3\0"+
    "\1\226\2\0\2\226\5\0\6\226\2\0\6\226\2\0"+
    "\2\226\20\0\2\161\1\0\2\161\2\0\17\161\1\0"+
    "\1\161\1\0\5\161\5\0\6\161\2\0\6\161\2\0"+
    "\2\161\11\0\1\227\7\0\1\162\4\0\1\230\2\0"+
    "\1\162\15\0\1\162\2\0\2\162\1\0\1\231\21\0"+
    "\1\231\16\0\1\232\7\0\1\162\4\0\1\164\2\0"+
    "\1\162\15\0\1\165\2\0\2\162\52\0\1\230\7\0"+
    "\1\230\15\0\1\230\2\0\2\230\52\0\1\162\4\0"+
    "\1\230\2\0\1\162\15\0\1\162\2\233\2\162\1\234"+
    "\1\231\21\0\1\231\16\0\1\232\6\0\1\235\2\0"+
    "\2\235\2\0\2\235\1\0\14\235\3\0\1\235\2\0"+
    "\2\235\5\0\6\235\2\0\6\235\2\0\2\235\27\0"+
    "\1\236\2\0\2\237\1\240\26\0\1\241\1\242\1\0"+
    "\1\243\4\0\1\244\1\240\3\0\1\242\3\0\1\244"+
    "\20\0\2\170\1\0\2\170\2\0\17\170\1\0\1\170"+
    "\1\0\5\170\5\0\6\170\2\0\6\170\2\0\2\170"+
    "\21\0\1\171\1\0\3\171\1\245\3\171\1\0\4\171"+
    "\1\0\6\171\1\0\1\171\1\0\5\171\5\0\6\171"+
    "\2\0\6\171\2\0\2\171\21\0\1\111\1\0\3\111"+
    "\1\112\1\111\1\246\1\111\1\0\4\111\1\0\5\111"+
    "\1\247\1\113\1\111\1\0\5\111\5\0\6\111\2\0"+
    "\6\111\2\0\2\111\12\0\1\110\26\0\1\250\33\0"+
    "\1\250\30\0\1\111\1\0\3\111\1\112\3\111\1\0"+
    "\4\111\1\0\1\111\1\251\4\111\1\113\1\111\1\0"+
    "\5\111\5\0\6\111\2\0\2\111\1\251\3\111\2\0"+
    "\2\111\12\0\1\110\6\0\1\111\1\0\3\111\1\112"+
    "\3\111\1\0\4\111\1\252\1\253\5\111\1\113\1\111"+
    "\1\0\5\111\5\0\6\111\2\0\6\111\2\0\2\111"+
    "\12\0\1\110\6\0\1\254\1\0\1\176\1\254\2\176"+
    "\3\254\1\0\4\254\1\0\6\254\1\0\1\254\1\0"+
    "\5\254\5\0\6\254\2\0\6\254\2\0\2\254\21\0"+
    "\1\111\1\0\3\111\1\112\1\255\2\111\1\0\4\111"+
    "\1\0\6\111\1\113\1\111\1\0\5\111\5\0\6\111"+
    "\2\0\6\111\2\0\2\111\12\0\1\110\6\0\1\111"+
    "\1\0\3\111\1\112\3\111\1\0\4\111\1\0\6\111"+
    "\1\113\1\111\1\0\5\111\5\0\6\111\2\0\6\111"+
    "\2\0\2\111\12\0\1\110\1\256\14\0\1\257\75\0"+
    "\1\202\7\0\1\202\15\0\1\202\2\0\2\202\46\0"+
    "\1\207\2\0\1\260\2\0\2\260\2\0\2\260\1\0"+
    "\14\260\3\0\1\260\2\0\2\260\5\0\6\260\2\0"+
    "\6\260\1\261\1\0\2\260\2\0\1\262\61\0\1\263"+
    "\13\0\1\263\40\0\1\264\37\0\1\264\76\0\1\265"+
    "\103\0\1\266\103\0\1\267\13\0\1\267\45\0\1\270"+
    "\33\0\1\270\74\0\1\271\64\0\1\272\127\0\1\273"+
    "\46\0\2\274\102\0\1\21\15\0\1\21\2\0\2\21"+
    "\52\0\1\21\7\0\1\21\10\0\4\21\1\0\1\21"+
    "\1\0\3\21\1\0\1\21\20\0\2\21\23\0\1\150"+
    "\1\151\1\152\1\155\1\0\2\155\1\111\1\112\1\275"+
    "\2\155\1\152\4\155\1\152\6\155\1\113\1\155\1\0"+
    "\5\155\5\0\6\155\2\0\6\155\2\0\2\155\7\0"+
    "\1\153\2\0\1\110\3\0\1\150\1\151\1\152\1\155"+
    "\1\0\2\155\1\111\1\112\3\155\1\152\4\155\1\152"+
    "\6\155\1\113\1\155\1\0\5\155\5\0\6\155\2\0"+
    "\6\155\2\0\2\155\7\0\1\153\2\0\1\110\1\256"+
    "\4\0\2\226\1\0\2\226\2\0\17\226\1\0\1\226"+
    "\1\0\5\226\5\0\6\226\2\0\6\226\2\0\2\226"+
    "\21\0\1\230\7\0\1\230\15\0\1\230\2\0\2\230"+
    "\1\0\1\231\21\0\1\231\16\0\1\232\7\0\1\276"+
    "\3\0\1\277\3\0\1\276\15\0\1\276\2\0\2\276"+
    "\2\0\1\277\75\0\1\300\2\0\1\300\53\0\1\301"+
    "\7\0\1\301\10\0\4\301\1\0\1\301\1\0\3\301"+
    "\1\0\1\301\20\0\2\301\25\0\2\235\1\0\2\235"+
    "\2\0\17\235\1\0\1\235\1\0\5\235\5\0\6\235"+
    "\2\0\6\235\2\0\2\235\11\0\1\302\33\0\1\303"+
    "\16\0\1\304\13\0\1\304\61\0\1\305\21\0\1\305"+
    "\35\0\1\306\112\0\1\307\123\0\1\310\21\0\1\310"+
    "\37\0\2\311\116\0\1\312\60\0\1\313\1\0\7\313"+
    "\1\0\4\313\1\0\6\313\1\0\1\313\1\0\5\313"+
    "\5\0\6\313\2\0\6\313\2\0\2\313\21\0\1\111"+
    "\1\0\3\111\1\112\1\314\2\111\1\0\1\111\1\315"+
    "\2\111\1\0\6\111\1\113\1\111\1\0\5\111\5\0"+
    "\6\111\2\0\1\111\1\315\4\111\2\0\2\111\12\0"+
    "\1\110\6\0\1\111\1\0\3\111\1\112\3\111\1\0"+
    "\1\111\1\316\2\111\1\0\6\111\1\113\1\111\1\0"+
    "\5\111\5\0\6\111\2\0\1\111\1\316\4\111\2\0"+
    "\2\111\12\0\1\110\27\0\1\21\63\0\1\111\1\0"+
    "\3\111\1\112\3\111\1\0\4\111\1\0\2\111\1\25"+
    "\3\111\1\113\1\111\1\0\5\111\5\0\6\111\2\0"+
    "\6\111\2\0\2\111\12\0\1\110\31\0\1\317\31\0"+
    "\1\317\27\0\1\111\1\0\3\111\1\112\3\111\1\0"+
    "\4\111\1\0\4\111\1\320\1\111\1\113\1\111\1\0"+
    "\5\111\5\0\6\111\2\0\3\111\1\320\2\111\2\0"+
    "\2\111\12\0\1\110\6\0\1\254\1\0\1\176\1\254"+
    "\2\176\3\254\1\0\4\254\1\0\6\254\1\113\1\254"+
    "\1\0\5\254\5\0\6\254\2\0\6\254\2\0\2\254"+
    "\21\0\1\111\1\0\3\111\1\112\3\111\1\321\1\200"+
    "\3\111\1\0\6\111\1\113\1\111\1\0\5\111\5\0"+
    "\6\111\2\0\6\111\2\0\2\111\12\0\1\110\1\256"+
    "\32\0\1\322\65\0\1\51\73\0\1\323\1\324\2\260"+
    "\1\0\2\260\2\0\17\260\1\0\1\260\1\0\5\260"+
    "\5\0\6\260\2\0\6\260\2\0\2\260\20\0\1\325"+
    "\2\0\2\325\2\0\2\325\1\0\14\325\3\0\1\325"+
    "\2\0\2\325\5\0\6\325\2\0\6\325\2\0\2\325"+
    "\20\0\1\326\2\0\2\326\2\0\2\326\1\0\14\326"+
    "\3\0\1\326\2\0\2\326\5\0\6\326\2\0\6\326"+
    "\2\0\2\326\37\0\2\327\61\0\1\330\37\0\1\331"+
    "\21\0\1\331\6\0\1\21\47\0\1\332\100\0\1\333"+
    "\104\0\1\334\104\0\1\335\75\0\1\336\104\0\1\330"+
    "\123\0\1\337\21\0\1\337\62\0\1\333\21\0\1\333"+
    "\23\0\1\150\1\151\1\152\1\155\1\0\2\155\1\111"+
    "\1\112\3\155\1\340\1\225\3\155\1\152\6\155\1\113"+
    "\1\155\1\0\5\155\5\0\6\155\2\0\6\155\2\0"+
    "\2\155\7\0\1\153\2\0\1\110\1\256\5\0\1\276"+
    "\7\0\1\276\15\0\1\276\2\0\2\276\42\0\1\232"+
    "\7\0\1\276\7\0\1\276\15\0\1\276\2\0\2\276"+
    "\100\0\1\300\2\0\1\300\43\0\1\232\7\0\1\301"+
    "\7\0\1\301\10\0\4\301\1\0\1\301\1\0\3\301"+
    "\1\0\1\301\20\0\2\301\16\0\1\232\52\0\1\341"+
    "\13\0\1\341\71\0\1\342\74\0\1\343\21\0\1\343"+
    "\71\0\1\344\13\0\1\344\71\0\1\345\53\0\1\346"+
    "\37\0\1\346\65\0\1\347\21\0\1\347\71\0\1\343"+
    "\13\0\1\343\25\0\1\111\1\0\3\111\1\112\2\111"+
    "\1\25\1\21\1\25\3\111\1\0\6\111\1\113\1\111"+
    "\1\0\5\111\5\0\6\111\2\0\6\111\2\0\2\111"+
    "\12\0\1\110\6\0\1\111\1\0\3\111\1\112\3\111"+
    "\1\0\2\111\1\350\1\111\1\0\6\111\1\113\1\111"+
    "\1\0\5\111\5\0\6\111\2\0\6\111\2\0\2\111"+
    "\12\0\1\110\6\0\1\111\1\0\3\111\1\112\3\111"+
    "\1\0\4\111\1\0\2\111\1\351\3\111\1\113\1\111"+
    "\1\0\5\111\5\0\6\111\2\0\6\111\2\0\2\111"+
    "\12\0\1\110\31\0\1\21\31\0\1\21\27\0\1\111"+
    "\1\0\3\111\1\112\3\111\1\0\4\111\1\0\4\111"+
    "\1\25\1\111\1\113\1\111\1\0\5\111\5\0\6\111"+
    "\2\0\3\111\1\25\2\111\2\0\2\111\12\0\1\110"+
    "\105\0\1\256\32\0\1\352\55\0\1\324\105\0\2\325"+
    "\1\0\2\325\2\0\17\325\1\0\1\325\1\0\5\325"+
    "\5\0\6\325\2\0\6\325\1\353\1\0\2\325\20\0"+
    "\2\326\1\0\2\326\2\0\17\326\1\0\1\326\1\0"+
    "\5\326\5\0\6\326\2\0\6\326\2\0\2\326\2\0"+
    "\1\353\36\0\1\354\33\0\1\354\24\0\1\330\70\0"+
    "\1\21\61\0\1\355\57\0\1\356\102\0\1\330\37\0"+
    "\1\330\77\0\1\330\101\0\1\334\13\0\1\334\21\0"+
    "\1\330\37\0\1\357\21\0\1\357\6\0\1\21\40\0"+
    "\1\333\60\0\1\150\1\151\2\152\1\0\2\152\2\0"+
    "\17\152\1\0\1\152\1\0\5\152\5\0\6\152\2\0"+
    "\6\152\2\0\2\152\7\0\1\153\3\0\1\256\31\0"+
    "\1\360\66\0\1\361\72\0\1\362\154\0\1\363\70\0"+
    "\1\364\121\0\1\365\50\0\2\366\72\0\1\111\1\0"+
    "\3\111\1\112\3\111\1\0\3\111\1\25\1\0\6\111"+
    "\1\113\1\111\1\0\5\111\5\0\6\111\2\0\6\111"+
    "\2\0\2\111\12\0\1\110\6\0\1\111\1\0\3\111"+
    "\1\112\1\111\1\25\1\111\1\0\4\111\1\0\6\111"+
    "\1\113\1\111\1\0\5\111\5\0\6\111\2\0\6\111"+
    "\2\0\2\111\12\0\1\110\6\0\11\367\1\0\4\367"+
    "\1\0\10\367\1\0\6\367\1\0\2\367\1\0\16\367"+
    "\1\0\3\367\7\0\1\367\2\0\2\367\2\0\1\323"+
    "\1\324\150\0\1\330\76\0\1\370\21\0\1\370\62\0"+
    "\1\330\21\0\1\330\52\0\1\371\74\0\1\372\124\0"+
    "\1\373\21\0\1\373\110\0\1\374\46\0\1\375\123\0"+
    "\1\376\13\0\1\376\21\0\1\377\110\0\1\u0100\2\367"+
    "\1\u0100\2\367\3\u0100\1\0\4\u0100\1\0\10\u0100\1\0"+
    "\5\u0100\1\367\1\0\2\367\1\0\6\u0100\2\367\6\u0100"+
    "\1\0\1\367\2\u0100\7\0\1\367\2\0\2\367\50\0"+
    "\1\330\13\0\1\330\45\0\1\330\33\0\1\330\24\0"+
    "\1\u0101\153\0\1\u0102\13\0\1\u0102\21\0\1\362\14\0"+
    "\2\343\107\0\1\372\107\0\1\343\33\0\1\343\43\0"+
    "\1\u0103\37\0\1\u0103\77\0\1\u0104\32\0\1\u0101\7\0"+
    "\1\u0105\143\0\1\u0106\13\0\1\u0106\2\0\1\u0107\56\0"+
    "\1\u0108\21\0\1\u0108\71\0\1\u0109\13\0\1\u0109\51\0"+
    "\1\u010a\76\0\2\u010b\107\0\1\372\75\0\1\u010c\37\0"+
    "\1\u010c\65\0\1\372\21\0\1\372\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15939];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\1\11\22\1\1\11\1\1\5\11\2\1\1\11"+
    "\15\1\2\11\6\1\1\11\3\1\10\0\2\1\2\0"+
    "\1\1\4\0\1\11\1\1\12\0\1\1\1\0\2\11"+
    "\1\1\1\11\16\0\1\1\11\0\1\1\1\0\1\11"+
    "\2\1\13\0\2\1\2\0\1\1\1\11\2\0\1\11"+
    "\21\0\1\1\25\0\1\11\10\0\2\1\6\0\1\1"+
    "\1\11\35\0\1\1\14\0\3\1\13\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private final static Set<String> PSEUDO_TYPES;
  private Stack<String> docLabels = new Stack<String>();

  static {
    PSEUDO_TYPES = new HashSet<String>(Arrays.asList(
        new String[] {
            "string", "integer", "int", "boolean", "bool", "float", "double",
            "object", "mixed", "array", "resource", "void", "null", "callback",
            "false", "true", "self", "callable"
        }
    ));
  }

  private boolean isTabOrSpace(int i) {
    return yycharat(i) == '\t' || yycharat(i) == ' ';
  }

  private static boolean isHtmlState(int state) {
    return state == YYINITIAL;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpSymbolTokenizer(java.io.Reader in) {
  super(in);
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public boolean yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { this.finalOffset=zzEndRead;
return false;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 33: break;
          case 2: 
            { if (!Consts.kwd.contains(yytext())) {
            setAttribs(yytext(), yychar, yychar + yylength());
            return true;
        }
            }
          case 34: break;
          case 3: 
            { yypush(QSTRING);
            }
          case 35: break;
          case 4: 
            { yypush(STRING);
            }
          case 36: break;
          case 5: 
            { yypush(BACKQUOTE);
            }
          case 37: break;
          case 6: 
            { yypush(SCOMMENT);
            }
          case 38: break;
          case 7: 
            { yypush(IN_SCRIPT);
            }
          case 39: break;
          case 8: 
            { if (!this.stack.empty() && !isHtmlState(this.stack.peek()))
            yypop(); //may pop STRINGEXPR/HEREDOC/BACKQUOTE
            }
          case 40: break;
          case 9: 
            { yypush(STRINGVAR);
            }
          case 41: break;
          case 10: 
            { yypop();
            }
          case 42: break;
          case 11: 
            { setAttribs(yytext(), yychar, yychar + yylength());
        return true;
            }
          case 43: break;
          case 12: 
            { yybegin(IN_SCRIPT);
            }
          case 44: break;
          case 13: 
            { yypushback(1); yypop();
            }
          case 45: break;
          case 14: 
            { yybegin(DOCCOMMENT); yypushback(1);
            }
          case 46: break;
          case 15: 
            { yybegin(yystate() == DOCCOM_TYPE_THEN_NAME ? DOCCOM_NAME : DOCCOMMENT);
            }
          case 47: break;
          case 16: 
            { if (!PSEUDO_TYPES.contains(yytext().toLowerCase())) {
            setAttribs(yytext(), yychar, yychar + yylength());
            return true;
        }
            }
          case 48: break;
          case 17: 
            { yypush(COMMENT);
            }
          case 49: break;
          case 18: 
            { while (!isHtmlState(yystate())) yypop();
            }
          case 50: break;
          case 19: 
            { //we ignore keywords if the identifier starts with one of variable chars
        setAttribs(yytext().substring(1), yychar + 1, yychar + yylength());
        return true;
            }
          case 51: break;
          case 20: 
            { yypush(STRINGEXPR);
            }
          case 52: break;
          case 21: 
            { yypushback(1);
        yypush(IN_SCRIPT);
            }
          case 53: break;
          case 22: 
            { int i = yylength() - 1;
    while (yycharat(i) == '\n' || yycharat(i) == '\r') { i--; }
    if (yycharat(i) == ';') { i--; }
    if (yytext().substring(0, i+1).equals(this.docLabels.peek())) {
        String text = this.docLabels.pop();
        yypop();
    }
            }
          case 54: break;
          case 23: 
            { setAttribs(yytext().substring(1), yychar + 1, yychar + yylength());
        yybegin(DOCCOMMENT);
        return true;
            }
          case 55: break;
          case 24: 
            { yypush(DOCCOMMENT);
            }
          case 56: break;
          case 25: 
            { setAttribs(yytext().substring(2), yychar + 2, yychar + yylength());
        yypop(); //because "$arr->a[0]" is the same as $arr->a . "[0]"
        return true;
            }
          case 57: break;
          case 26: 
            { //then the identifier is actually a string!
        yypop();
            }
          case 58: break;
          case 27: 
            { yypop(); //because "$arr[0][1]" is the same as $arr[0] . "[1]"
            }
          case 59: break;
          case 28: 
            { setAttribs(yytext().substring(2, yylength()-1), yychar + 2,
                yychar + yylength() - 1);
        yypop();
        return true;
            }
          case 60: break;
          case 29: 
            { int i = yycharat(0) == 'b' ? 4 : 3, j = yylength()-1;
        while (isTabOrSpace(i)) { i++; }
        while (yycharat(j) == '\n' || yycharat(j) == '\r') { j--; }

        if (yycharat(i) == '\'' || yycharat(i) == '"') {
            yypush(NOWDOC);
            String text = yytext().substring(i+1, j);
            this.docLabels.push(text);
        } else {
            yypush(HEREDOC);
            String text = yytext().substring(i, j+1);
            this.docLabels.push(text);
        }
            }
          case 61: break;
          case 30: 
            { yybegin(DOCCOM_TYPE);
            }
          case 62: break;
          case 31: 
            { yybegin(DOCCOM_NAME);
            }
          case 63: break;
          case 32: 
            { yybegin(DOCCOM_TYPE_THEN_NAME);
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
