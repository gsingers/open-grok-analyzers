/* The following code was generated by JFlex 1.6.1 */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Cross reference a PHP file
 */

package com.grantingersoll.opengrok.analysis.php;
import com.grantingersoll.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import com.grantingersoll.opengrok.web.Util;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/grantingersoll/projects/OpenGrok/src/org/opensolaris/opengrok/analysis/php/PhpXref.lex</tt>
 */
public class PhpXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG_NAME = 2;
  public static final int AFTER_TAG_NAME = 4;
  public static final int ATTRIBUTE_NOQUOTE = 6;
  public static final int ATTRIBUTE_SINGLE = 8;
  public static final int ATTRIBUTE_DOUBLE = 10;
  public static final int HTMLCOMMENT = 12;
  public static final int IN_SCRIPT = 14;
  public static final int STRING = 16;
  public static final int SCOMMENT = 18;
  public static final int HEREDOC = 20;
  public static final int NOWDOC = 22;
  public static final int COMMENT = 24;
  public static final int QSTRING = 26;
  public static final int BACKQUOTE = 28;
  public static final int STRINGEXPR = 30;
  public static final int STRINGVAR = 32;
  public static final int DOCCOMMENT = 34;
  public static final int DOCCOM_TYPE_THEN_NAME = 36;
  public static final int DOCCOM_NAME = 38;
  public static final int DOCCOM_TYPE = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 11, 12, 13, 14, 14, 15, 15, 16, 16, 17, 17, 
    18, 18, 19, 19, 20, 20, 21, 21, 20, 20
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\0\1\2\22\0\1\1\1\101\1\103"+
    "\1\105\1\56\1\6\1\112\1\65\1\71\1\72\1\66\1\42\1\6"+
    "\1\11\1\12\1\32\1\33\1\36\1\37\1\15\1\15\3\37\2\5"+
    "\1\102\1\110\1\43\1\45\1\46\1\44\1\111\1\31\1\35\1\26"+
    "\1\27\1\41\1\30\1\47\1\14\1\24\1\54\1\76\1\22\1\21"+
    "\1\25\1\51\1\13\1\10\1\50\1\17\1\20\1\52\1\74\1\73"+
    "\1\40\1\53\1\10\1\67\1\55\1\70\1\113\1\7\1\104\1\31"+
    "\1\35\1\26\1\27\1\63\1\62\1\47\1\14\1\24\1\54\1\76"+
    "\1\22\1\21\1\61\1\51\1\13\1\10\1\64\1\17\1\60\1\52"+
    "\1\57\1\73\1\40\1\53\1\10\1\106\1\34\1\107\1\6\6\4"+
    "\1\4\61\4\1\100\10\4\160\77\2\23\115\77\1\16\u0f80\77\u0f28\0"+
    "\1\0\1\0\u0100\0\1\75\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\26\0\1\1\1\2\2\3\6\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\16\1\11"+
    "\1\17\1\2\2\20\1\21\1\22\1\2\2\23\1\4"+
    "\1\11\1\24\1\25\3\4\1\25\1\24\1\11\2\4"+
    "\1\26\1\4\1\27\1\30\1\31\1\32\1\33\1\2"+
    "\2\34\1\11\1\4\1\35\1\4\1\2\2\4\1\1"+
    "\7\4\1\36\1\37\1\40\1\41\5\42\1\2\2\4"+
    "\3\43\10\0\1\5\1\44\2\0\1\14\1\45\1\0"+
    "\1\46\1\25\2\0\1\47\4\0\1\50\1\51\12\0"+
    "\1\52\1\0\1\52\1\53\1\2\1\54\1\55\1\56"+
    "\2\57\6\0\1\60\12\0\1\61\14\0\1\44\1\0"+
    "\1\62\1\0\1\45\1\63\1\0\1\46\1\25\1\0"+
    "\1\64\2\25\13\0\2\52\2\0\1\65\1\66\2\0"+
    "\1\67\3\0\10\70\6\0\1\71\7\0\1\72\3\0"+
    "\1\73\24\0\1\74\10\70\3\0\1\61\2\0\1\75"+
    "\1\76\2\0\2\76\4\0\2\77\5\0\1\100\7\0"+
    "\2\70\1\101\4\70\15\0\5\70\1\102\1\70\6\0"+
    "\1\103\1\70\1\101\2\70\3\0\1\104\1\70\3\0"+
    "\1\70\2\0\1\103\11\0\1\103\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474"+
    "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4"+
    "\0\u0720\0\u0688\0\u076c\0\u0688\0\u07b8\0\u0804\0\u0850\0\u089c"+
    "\0\u08e8\0\u0688\0\u0688\0\u0934\0\u0980\0\u0688\0\u09cc\0\u0a18"+
    "\0\u0a64\0\u0ab0\0\u0688\0\u0afc\0\u0688\0\u0b48\0\u0b94\0\u0688"+
    "\0\u0688\0\u0688\0\u0be0\0\u0c2c\0\u0688\0\u0c78\0\u0cc4\0\u0d10"+
    "\0\u0d5c\0\u0da8\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70"+
    "\0\u0fbc\0\u0688\0\u1008\0\u0688\0\u0688\0\u0688\0\u0688\0\u0688"+
    "\0\u1054\0\u10a0\0\u0688\0\u0688\0\u10ec\0\u1138\0\u1184\0\u11d0"+
    "\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430"+
    "\0\u147c\0\u14c8\0\u0688\0\u1514\0\u0688\0\u0688\0\u0688\0\u06d4"+
    "\0\u0720\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u0688\0\u16dc"+
    "\0\u1728\0\u076c\0\u1774\0\u07b8\0\u17c0\0\u180c\0\u1858\0\u18a4"+
    "\0\u18f0\0\u0688\0\u193c\0\u1988\0\u19d4\0\u0688\0\u1a20\0\u1a6c"+
    "\0\u1ab8\0\u1b04\0\u1b50\0\u0df4\0\u1b9c\0\u1be8\0\u1c34\0\u0f24"+
    "\0\u1c80\0\u0688\0\u1ccc\0\u1008\0\u1d18\0\u1d64\0\u1db0\0\u1dfc"+
    "\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u0688"+
    "\0\u0688\0\u0688\0\u0688\0\u0688\0\u0688\0\u205c\0\u0688\0\u12b4"+
    "\0\u20a8\0\u1300\0\u134c\0\u20f4\0\u2140\0\u0688\0\u218c\0\u21d8"+
    "\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u16dc"+
    "\0\u2438\0\u2484\0\u1728\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600"+
    "\0\u264c\0\u2698\0\u26e4\0\u2730\0\u277c\0\u0688\0\u27c8\0\u2814"+
    "\0\u2860\0\u0688\0\u0688\0\u28ac\0\u0688\0\u28f8\0\u28f8\0\u0688"+
    "\0\u1be8\0\u1c34\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0"+
    "\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20"+
    "\0\u2d6c\0\u2db8\0\u0688\0\u2e04\0\u2e50\0\u0688\0\u2e9c\0\u2ee8"+
    "\0\u2f34\0\u2f80\0\u2fcc\0\u3018\0\u3064\0\u30b0\0\u30fc\0\u3148"+
    "\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310\0\u335c\0\u33a8"+
    "\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608"+
    "\0\u3654\0\u36a0\0\u36ec\0\u0688\0\u3738\0\u3784\0\u37d0\0\u381c"+
    "\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4\0\u3a30\0\u3a7c"+
    "\0\u3ac8\0\u3b14\0\u3b60\0\u3bac\0\u3bf8\0\u3c44\0\u3c90\0\u3cdc"+
    "\0\u0688\0\u3d28\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0"+
    "\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u4104\0\u33f4"+
    "\0\u4150\0\u419c\0\u41e8\0\u0688\0\u07b8\0\u4234\0\u4280\0\u42cc"+
    "\0\u4318\0\u4364\0\u0688\0\u43b0\0\u43fc\0\u4448\0\u4494\0\u44e0"+
    "\0\u0688\0\u452c\0\u4578\0\u45c4\0\u4610\0\u465c\0\u46a8\0\u46f4"+
    "\0\u4740\0\u478c\0\u2f80\0\u47d8\0\u4824\0\u4870\0\u48bc\0\u4908"+
    "\0\u4954\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u4b1c\0\u4b68"+
    "\0\u4bb4\0\u4c00\0\u4c4c\0\u4c98\0\u4ce4\0\u4d30\0\u4d7c\0\u4dc8"+
    "\0\u4e14\0\u2f80\0\u0688\0\u4e60\0\u4eac\0\u4ef8\0\u4f44\0\u4f90"+
    "\0\u4fdc\0\u2f80\0\u5028\0\u5074\0\u50c0\0\u510c\0\u5158\0\u51a4"+
    "\0\u51f0\0\u4f44\0\u523c\0\u5288\0\u52d4\0\u5320\0\u536c\0\u53b8"+
    "\0\u5404\0\u5450\0\u549c\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u5618"+
    "\0\u5664\0\u56b0\0\u56fc\0\u0688\0\u5748";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\27\1\30\1\31\1\32\1\27\1\33\1\34\1\33"+
    "\1\35\2\33\1\35\1\36\1\33\1\27\4\35\1\27"+
    "\4\35\1\37\1\35\1\40\1\33\1\34\1\35\2\33"+
    "\2\35\1\34\1\41\2\34\1\42\6\35\2\34\3\35"+
    "\1\37\2\35\6\34\2\35\1\27\1\35\2\27\11\34"+
    "\1\43\1\34\1\27\1\30\1\31\1\32\1\27\2\34"+
    "\2\44\2\34\2\44\1\34\14\44\3\34\1\44\2\34"+
    "\2\44\1\34\1\45\2\34\1\46\6\44\2\34\6\44"+
    "\6\34\2\44\1\27\2\44\1\27\11\34\1\43\1\34"+
    "\1\27\1\30\1\31\1\32\1\27\2\34\2\47\2\34"+
    "\2\47\1\34\14\47\3\34\1\47\2\34\2\47\1\34"+
    "\1\45\1\34\1\50\1\46\6\47\2\34\6\47\6\34"+
    "\2\47\1\27\2\47\1\27\11\34\1\43\1\34\1\27"+
    "\1\51\1\52\1\53\1\27\11\34\1\27\4\34\1\27"+
    "\17\34\1\54\2\34\1\55\26\34\1\27\1\34\2\27"+
    "\11\34\1\43\1\34\1\27\1\56\1\57\1\60\1\27"+
    "\11\34\1\27\4\34\1\27\17\34\1\54\2\34\1\42"+
    "\16\34\1\61\7\34\1\27\1\34\2\27\11\34\1\43"+
    "\1\34\1\27\1\56\1\57\1\60\1\27\11\34\1\27"+
    "\4\34\1\27\17\34\1\54\2\34\1\42\26\34\1\27"+
    "\1\34\2\27\2\34\1\62\6\34\1\43\1\34\1\27"+
    "\1\63\1\64\1\65\1\27\1\33\1\34\1\33\1\35"+
    "\1\66\1\33\1\35\1\36\1\33\1\27\4\35\1\27"+
    "\4\35\1\37\1\35\1\40\1\33\1\34\1\35\2\33"+
    "\2\35\1\34\1\67\2\34\1\42\6\35\2\34\3\35"+
    "\1\37\2\35\6\34\2\35\1\27\1\35\2\27\11\34"+
    "\1\43\1\34\1\27\1\30\1\31\1\32\1\70\1\71"+
    "\1\34\2\70\1\72\1\73\2\70\1\71\14\70\1\74"+
    "\1\75\1\34\1\76\2\71\2\70\1\72\1\77\1\100"+
    "\1\34\1\42\6\70\1\34\1\101\6\70\1\102\3\34"+
    "\1\103\1\34\2\70\1\27\3\70\2\34\1\104\1\105"+
    "\1\106\1\107\1\110\2\34\1\43\1\34\1\27\1\111"+
    "\1\112\1\113\1\27\1\33\1\34\1\33\1\35\2\33"+
    "\1\35\1\36\1\33\1\27\4\35\1\27\4\35\1\37"+
    "\1\35\1\40\1\33\1\34\1\35\2\33\2\35\1\34"+
    "\1\114\2\34\1\42\6\35\1\115\1\116\3\35\1\37"+
    "\2\35\6\34\2\35\1\27\1\35\2\27\2\34\1\62"+
    "\2\34\1\117\3\34\1\43\1\34\1\27\1\120\1\52"+
    "\1\53\1\27\1\33\1\34\1\33\1\35\2\33\1\35"+
    "\1\36\1\33\1\27\4\35\1\27\4\35\1\37\1\35"+
    "\1\40\1\33\1\34\1\35\2\33\2\35\1\34\1\114"+
    "\1\121\1\34\1\42\6\35\2\34\3\35\1\37\2\35"+
    "\6\34\2\35\1\27\1\35\2\27\11\34\1\43\1\34"+
    "\1\27\1\111\1\112\1\113\1\27\1\33\1\34\1\33"+
    "\1\35\2\33\1\35\1\36\1\33\1\27\4\35\1\27"+
    "\4\35\1\37\1\35\1\40\1\33\1\34\1\35\2\33"+
    "\2\35\1\34\1\114\2\34\1\42\6\35\1\122\1\116"+
    "\3\35\1\37\2\35\6\34\2\35\1\27\1\35\2\27"+
    "\5\34\1\117\3\34\1\43\1\34\1\27\1\111\1\112"+
    "\1\113\1\123\1\33\1\34\1\124\1\125\2\33\1\125"+
    "\1\126\1\33\1\123\4\125\1\123\4\125\1\127\1\125"+
    "\1\40\1\33\1\34\1\125\2\33\2\125\1\34\1\114"+
    "\2\34\1\42\6\125\1\122\1\116\3\125\1\127\2\125"+
    "\6\34\2\125\1\27\1\125\2\123\5\34\1\117\3\34"+
    "\1\43\1\34\1\27\1\111\1\112\1\113\1\27\1\33"+
    "\1\34\1\33\1\35\2\33\1\35\1\36\1\33\1\27"+
    "\4\35\1\27\4\35\1\37\1\35\1\40\1\33\1\34"+
    "\1\35\2\33\2\35\1\34\1\114\2\34\1\42\6\35"+
    "\2\34\3\35\1\37\2\35\6\34\2\35\1\27\1\35"+
    "\2\27\11\34\1\43\1\34\1\27\1\111\1\112\1\113"+
    "\1\123\1\33\1\34\1\124\1\125\2\33\1\125\1\126"+
    "\1\33\1\123\4\125\1\123\4\125\1\127\1\125\1\40"+
    "\1\33\1\34\1\125\2\33\2\125\1\34\1\114\2\34"+
    "\1\42\6\125\2\34\3\125\1\127\2\125\6\34\2\125"+
    "\1\27\1\125\2\123\11\34\1\43\1\34\1\27\1\63"+
    "\1\64\1\65\1\27\1\33\1\34\1\33\1\35\2\33"+
    "\1\35\1\36\1\33\1\27\4\35\1\27\4\35\1\37"+
    "\1\35\1\40\1\33\1\34\1\35\2\33\2\35\1\34"+
    "\1\114\2\34\1\42\6\35\2\34\3\35\1\37\2\35"+
    "\1\34\1\130\4\34\2\35\1\27\1\35\2\27\11\34"+
    "\1\43\1\34\1\27\1\111\1\112\1\113\1\27\1\33"+
    "\1\34\1\33\1\35\2\33\1\35\1\36\1\33\1\27"+
    "\4\35\1\27\4\35\1\37\1\35\1\40\1\33\1\34"+
    "\1\35\2\33\2\35\1\34\1\114\2\34\1\42\6\35"+
    "\1\131\1\34\3\35\1\37\2\35\1\62\5\34\2\35"+
    "\1\27\1\35\2\27\11\34\1\43\1\34\1\27\1\111"+
    "\1\112\1\113\1\27\1\33\1\34\1\33\1\35\2\33"+
    "\1\35\1\36\1\33\1\27\4\35\1\27\4\35\1\37"+
    "\1\35\1\40\1\33\1\34\1\35\2\33\2\35\1\34"+
    "\1\114\2\34\1\42\6\35\1\132\1\116\3\35\1\37"+
    "\2\35\6\34\2\35\1\27\1\35\2\27\3\34\1\133"+
    "\1\34\1\117\3\34\1\43\1\34\1\27\1\30\1\31"+
    "\1\32\1\134\2\34\2\134\2\34\2\134\1\34\14\134"+
    "\3\34\1\134\2\34\2\134\1\34\1\114\2\34\1\42"+
    "\6\134\2\34\6\134\2\34\1\135\3\34\2\134\1\27"+
    "\3\134\6\34\1\136\2\34\1\43\1\34\1\137\1\140"+
    "\1\141\1\137\1\134\2\137\2\134\1\142\1\137\2\134"+
    "\1\137\14\134\3\137\1\134\2\137\2\134\5\137\6\134"+
    "\2\137\6\134\2\137\1\143\3\137\2\134\1\137\3\134"+
    "\13\137\1\27\1\144\1\64\1\65\1\27\1\33\1\34"+
    "\1\33\1\35\2\33\1\35\1\36\1\33\1\27\4\35"+
    "\1\27\4\35\1\37\1\35\1\40\1\33\1\34\1\35"+
    "\2\33\2\35\1\34\1\114\2\34\1\42\6\35\2\34"+
    "\3\35\1\37\2\35\1\34\1\145\4\34\2\35\1\27"+
    "\1\35\2\27\5\34\1\146\3\34\1\43\1\34\1\147"+
    "\1\150\113\147\1\151\112\147\115\0\1\30\1\31\1\32"+
    "\113\0\1\32\115\0\1\152\1\0\7\152\1\0\4\152"+
    "\1\0\6\152\1\0\1\152\1\0\5\152\5\0\6\152"+
    "\2\0\6\152\6\0\2\152\1\0\1\152\12\0\1\153"+
    "\7\0\1\154\1\0\3\154\1\155\3\154\1\0\4\154"+
    "\1\0\6\154\1\156\1\154\1\0\5\154\5\0\6\154"+
    "\2\0\6\154\6\0\2\154\1\0\1\154\12\0\1\153"+
    "\7\0\1\154\1\0\3\154\1\155\3\154\1\0\1\154"+
    "\1\157\2\154\1\0\6\154\1\156\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\1\154\1\157\4\154\6\0\2\154"+
    "\1\0\1\154\12\0\1\153\7\0\1\154\1\0\3\154"+
    "\1\155\3\154\1\0\1\154\1\160\2\154\1\0\6\154"+
    "\1\156\1\154\1\0\5\154\5\0\6\154\2\0\1\154"+
    "\1\160\4\154\6\0\2\154\1\0\1\154\12\0\1\153"+
    "\12\0\1\161\2\0\2\161\2\0\4\161\1\0\6\161"+
    "\3\0\1\161\2\0\2\161\5\0\6\161\2\0\6\161"+
    "\6\0\2\161\1\0\1\161\47\0\1\162\11\0\1\163"+
    "\34\0\1\164\17\0\1\44\1\0\23\44\1\0\1\44"+
    "\1\0\5\44\5\0\6\44\2\0\6\44\6\0\2\44"+
    "\1\0\3\44\1\0\1\165\55\0\1\163\54\0\1\47"+
    "\1\0\23\47\1\0\1\47\1\0\5\47\5\0\6\47"+
    "\2\0\6\47\6\0\2\47\1\0\3\47\14\0\1\50"+
    "\63\0\1\166\15\0\1\166\11\0\1\51\1\52\1\53"+
    "\113\0\1\53\154\0\1\167\50\0\1\56\1\57\1\60"+
    "\113\0\1\60\111\0\1\63\1\64\1\65\113\0\1\65"+
    "\115\0\1\152\1\0\2\152\1\170\4\152\1\0\4\152"+
    "\1\0\6\152\1\0\1\152\1\0\5\152\5\0\6\152"+
    "\2\0\6\152\6\0\2\152\1\0\1\152\12\0\1\153"+
    "\46\0\1\171\53\0\2\70\1\0\2\70\2\0\17\70"+
    "\1\0\1\70\1\0\5\70\5\0\6\70\2\0\6\70"+
    "\6\0\2\70\1\0\3\70\20\0\1\71\4\0\1\172"+
    "\2\0\1\71\15\0\1\71\2\0\2\71\1\0\1\173"+
    "\21\0\1\173\35\0\1\71\4\0\1\174\2\0\1\71"+
    "\15\0\1\75\2\0\2\71\61\0\1\172\7\0\1\172"+
    "\15\0\1\172\2\0\2\172\106\0\1\106\33\0\1\175"+
    "\32\0\1\71\4\0\1\172\2\0\1\71\15\0\1\71"+
    "\2\176\2\71\1\177\1\173\21\0\1\173\34\0\2\70"+
    "\1\0\2\70\2\0\17\70\1\0\1\70\1\0\5\70"+
    "\1\0\1\200\3\0\6\70\2\0\6\70\1\102\5\0"+
    "\2\70\1\0\3\70\2\0\1\104\53\0\1\201\116\0"+
    "\1\202\51\0\1\203\2\0\2\203\2\0\2\203\1\0"+
    "\14\203\3\0\1\203\2\0\2\203\5\0\6\203\2\0"+
    "\6\203\6\0\2\203\1\0\3\203\14\0\1\204\14\0"+
    "\2\205\3\0\2\206\2\0\1\207\1\210\1\211\3\0"+
    "\1\212\12\0\1\213\1\214\1\215\7\0\1\210\1\0"+
    "\1\213\30\0\1\111\1\112\1\113\113\0\1\113\125\0"+
    "\1\216\15\0\1\216\2\0\2\216\1\217\14\0\10\220"+
    "\16\0\1\221\2\0\1\222\113\0\1\223\63\0\1\224"+
    "\36\0\1\120\1\52\1\53\156\0\1\225\62\0\1\216"+
    "\15\0\1\216\2\0\2\216\1\217\14\0\10\220\21\0"+
    "\1\222\7\0\1\226\1\227\2\230\1\0\2\230\2\0"+
    "\17\230\1\0\1\230\1\0\5\230\5\0\6\230\2\0"+
    "\6\230\6\0\2\230\1\0\3\230\7\0\1\231\5\0"+
    "\1\226\1\227\1\230\1\232\1\0\2\232\2\152\3\232"+
    "\1\230\4\232\1\230\6\232\1\0\1\232\1\0\5\232"+
    "\5\0\6\232\2\0\6\232\6\0\2\232\1\0\1\232"+
    "\2\230\7\0\1\231\1\153\4\0\1\226\1\227\1\230"+
    "\1\233\1\0\2\233\1\154\1\155\3\233\1\230\4\233"+
    "\1\230\6\233\1\156\1\233\1\0\5\233\5\0\6\233"+
    "\2\0\6\233\6\0\2\233\1\0\1\233\2\230\7\0"+
    "\1\231\1\153\4\0\1\226\1\227\1\230\1\233\1\0"+
    "\2\233\1\154\1\155\3\233\1\230\1\233\1\234\2\233"+
    "\1\230\6\233\1\156\1\233\1\0\5\233\5\0\6\233"+
    "\2\0\1\233\1\234\4\233\6\0\2\233\1\0\1\233"+
    "\2\230\7\0\1\231\1\153\4\0\1\226\1\227\1\230"+
    "\1\233\1\0\2\233\1\154\1\155\3\233\1\230\1\233"+
    "\1\235\2\233\1\230\6\233\1\156\1\233\1\0\5\233"+
    "\5\0\6\233\2\0\1\233\1\235\4\233\6\0\2\233"+
    "\1\0\1\233\2\230\7\0\1\231\1\153\34\0\1\236"+
    "\136\0\1\220\7\0\1\220\43\0\1\216\15\0\1\216"+
    "\2\0\2\216\1\217\14\0\10\220\17\0\1\221\1\0"+
    "\1\222\11\0\2\134\1\0\2\134\2\0\17\134\1\0"+
    "\1\134\1\0\5\134\5\0\6\134\2\0\6\134\6\0"+
    "\2\134\1\0\3\134\61\0\1\237\51\0\1\240\1\241"+
    "\1\0\2\240\1\242\1\243\2\240\1\241\14\240\1\0"+
    "\1\244\1\0\1\240\2\241\2\240\1\242\4\0\6\240"+
    "\1\0\1\245\6\240\6\0\2\240\1\0\3\240\14\0"+
    "\1\144\1\64\1\65\105\0\1\246\34\0\1\236\56\0"+
    "\1\246\113\0\1\247\3\0\1\250\2\0\1\251\2\0"+
    "\2\251\2\0\2\251\1\0\14\251\3\0\1\251\2\0"+
    "\2\251\5\0\6\251\2\0\6\251\4\0\1\252\1\0"+
    "\2\251\1\0\3\251\14\0\1\253\54\0\1\254\42\0"+
    "\1\255\1\0\7\255\1\0\4\255\1\0\6\255\1\0"+
    "\1\255\1\0\5\255\5\0\6\255\2\0\6\255\6\0"+
    "\2\255\1\0\1\255\22\0\1\154\1\0\3\154\1\155"+
    "\1\256\2\154\1\0\4\154\1\257\1\260\2\154\1\261"+
    "\2\154\1\156\1\154\1\0\5\154\5\0\6\154\2\0"+
    "\6\154\6\0\2\154\1\0\1\154\12\0\1\153\12\0"+
    "\1\262\2\0\2\262\2\0\4\262\1\0\6\262\3\0"+
    "\1\262\2\0\2\262\5\0\6\262\2\0\6\262\6\0"+
    "\2\262\1\0\1\262\22\0\1\154\1\0\3\154\1\155"+
    "\3\154\1\0\1\154\1\263\2\154\1\0\6\154\1\156"+
    "\1\154\1\0\5\154\5\0\6\154\2\0\1\154\1\263"+
    "\4\154\6\0\2\154\1\0\1\154\12\0\1\153\7\0"+
    "\1\154\1\0\3\154\1\155\1\264\2\154\1\0\4\154"+
    "\1\0\6\154\1\156\1\154\1\0\5\154\5\0\6\154"+
    "\2\0\6\154\6\0\2\154\1\0\1\154\12\0\1\153"+
    "\7\0\1\161\1\0\7\161\1\0\4\161\1\0\6\161"+
    "\1\156\1\161\1\0\5\161\5\0\6\161\2\0\6\161"+
    "\6\0\2\161\1\0\1\161\30\0\1\265\31\0\1\266"+
    "\57\0\1\267\111\0\2\270\2\0\2\270\1\0\14\270"+
    "\3\0\1\270\2\0\2\270\5\0\6\270\2\0\6\270"+
    "\6\0\2\270\1\0\2\270\27\0\1\271\31\0\1\272"+
    "\53\0\1\152\1\0\7\152\1\0\4\152\1\0\6\152"+
    "\1\0\1\152\1\0\5\152\4\0\1\273\6\152\2\0"+
    "\6\152\6\0\2\152\1\0\1\152\12\0\1\153\15\0"+
    "\1\274\31\0\1\275\53\0\1\172\7\0\1\172\15\0"+
    "\1\172\2\0\2\172\1\0\1\173\21\0\1\173\35\0"+
    "\1\276\3\0\1\277\3\0\1\276\15\0\1\276\2\0"+
    "\2\276\2\0\1\277\137\0\1\300\60\0\1\301\2\0"+
    "\1\301\62\0\1\302\7\0\1\302\10\0\4\302\1\0"+
    "\1\302\1\0\3\302\1\0\1\302\20\0\2\302\73\0"+
    "\1\303\54\0\2\203\1\0\2\203\2\0\17\203\1\0"+
    "\1\203\1\0\5\203\5\0\6\203\2\0\6\203\6\0"+
    "\2\203\1\0\3\203\33\0\1\304\37\0\1\304\60\0"+
    "\1\305\33\0\1\305\103\0\1\306\64\0\1\307\141\0"+
    "\1\310\13\0\1\310\52\0\2\311\24\0\1\312\103\0"+
    "\1\313\21\0\1\313\65\0\1\314\103\0\1\315\33\0"+
    "\1\315\47\0\1\316\15\0\1\316\2\0\2\316\61\0"+
    "\1\317\7\0\1\317\10\0\4\317\1\0\1\317\1\0"+
    "\3\317\1\0\1\317\20\0\2\317\33\0\1\227\112\0"+
    "\1\226\1\227\112\0\1\226\1\227\1\230\1\233\1\0"+
    "\2\233\1\154\1\155\3\233\1\230\1\233\1\320\2\233"+
    "\1\230\6\233\1\156\1\233\1\0\5\233\5\0\6\233"+
    "\2\0\1\233\1\320\4\233\6\0\2\233\1\0\1\233"+
    "\2\230\7\0\1\231\1\153\4\0\1\226\1\227\1\230"+
    "\1\233\1\0\2\233\1\154\1\155\1\321\2\233\1\230"+
    "\4\233\1\230\6\233\1\156\1\233\1\0\5\233\5\0"+
    "\6\233\2\0\6\233\6\0\2\233\1\0\1\233\2\230"+
    "\7\0\1\231\1\153\6\0\1\322\2\0\2\322\2\0"+
    "\2\322\1\0\14\322\3\0\1\322\2\0\2\322\5\0"+
    "\6\322\2\0\6\322\6\0\2\322\1\0\3\322\17\0"+
    "\2\240\1\0\2\240\2\0\17\240\1\0\1\240\1\0"+
    "\5\240\5\0\6\240\2\0\6\240\3\0\1\323\2\0"+
    "\2\240\1\0\3\240\20\0\1\241\4\0\1\324\2\0"+
    "\1\241\15\0\1\241\2\0\2\241\1\0\1\325\21\0"+
    "\1\325\4\0\1\326\30\0\1\241\4\0\1\243\2\0"+
    "\1\241\15\0\1\244\2\0\2\241\61\0\1\324\7\0"+
    "\1\324\15\0\1\324\2\0\2\324\61\0\1\241\4\0"+
    "\1\324\2\0\1\241\15\0\1\241\2\327\2\241\1\330"+
    "\1\325\21\0\1\325\4\0\1\326\27\0\1\331\2\0"+
    "\2\331\2\0\2\331\1\0\14\331\3\0\1\331\2\0"+
    "\2\331\5\0\6\331\2\0\6\331\6\0\2\331\1\0"+
    "\3\331\17\0\1\332\2\0\2\332\2\0\1\333\1\332"+
    "\1\0\2\334\1\335\11\332\3\0\1\332\2\0\2\332"+
    "\5\0\1\336\1\337\1\332\1\340\2\332\2\0\1\341"+
    "\1\335\3\332\1\337\6\0\1\332\1\341\1\0\3\332"+
    "\35\0\1\342\2\343\14\0\1\344\21\0\1\344\34\0"+
    "\2\251\1\0\2\251\2\0\17\251\1\0\1\251\1\345"+
    "\5\251\5\0\6\251\2\0\6\251\2\0\1\346\3\0"+
    "\2\251\1\0\3\251\17\0\1\347\2\0\2\347\2\0"+
    "\2\347\1\0\14\347\3\0\1\347\2\0\2\347\5\0"+
    "\6\347\2\0\6\347\6\0\2\347\1\0\3\347\17\0"+
    "\1\350\2\0\2\350\2\0\2\350\1\0\14\350\3\0"+
    "\1\350\2\0\2\350\5\0\6\350\2\0\6\350\6\0"+
    "\2\350\1\0\3\350\20\0\1\255\1\0\3\255\1\351"+
    "\3\255\1\0\4\255\1\0\6\255\1\0\1\255\1\0"+
    "\5\255\5\0\6\255\2\0\6\255\6\0\2\255\1\0"+
    "\1\255\22\0\1\154\1\0\3\154\1\155\1\154\1\352"+
    "\1\154\1\0\4\154\1\0\5\154\1\353\1\156\1\154"+
    "\1\0\5\154\5\0\6\154\2\0\6\154\6\0\2\154"+
    "\1\0\1\154\12\0\1\153\27\0\1\354\33\0\1\354"+
    "\37\0\1\154\1\0\3\154\1\155\3\154\1\0\4\154"+
    "\1\0\1\154\1\355\4\154\1\156\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\2\154\1\355\3\154\6\0\2\154"+
    "\1\0\1\154\12\0\1\153\7\0\1\154\1\0\3\154"+
    "\1\155\3\154\1\0\4\154\1\356\1\357\5\154\1\156"+
    "\1\154\1\0\5\154\5\0\6\154\2\0\6\154\6\0"+
    "\2\154\1\0\1\154\12\0\1\153\7\0\1\360\1\0"+
    "\1\262\1\360\2\262\3\360\1\0\4\360\1\0\6\360"+
    "\1\0\1\360\1\0\5\360\5\0\6\360\2\0\6\360"+
    "\6\0\2\360\1\0\1\360\22\0\1\154\1\0\3\154"+
    "\1\155\1\361\2\154\1\0\4\154\1\0\6\154\1\156"+
    "\1\154\1\0\5\154\5\0\6\154\2\0\6\154\6\0"+
    "\2\154\1\0\1\154\12\0\1\153\7\0\1\154\1\0"+
    "\3\154\1\155\3\154\1\0\4\154\1\0\6\154\1\156"+
    "\1\154\1\0\5\154\5\0\6\154\2\0\6\154\6\0"+
    "\2\154\1\0\1\154\3\0\1\362\6\0\1\153\16\0"+
    "\1\363\110\0\1\364\107\0\1\270\1\0\23\270\1\0"+
    "\1\270\1\0\5\270\5\0\6\270\2\0\6\270\6\0"+
    "\2\270\1\0\3\270\27\0\1\365\113\0\1\366\104\0"+
    "\1\276\7\0\1\276\15\0\1\276\2\0\2\276\55\0"+
    "\1\303\2\0\1\367\2\0\2\367\2\0\2\367\1\0"+
    "\14\367\3\0\1\367\2\0\2\367\5\0\6\367\2\0"+
    "\6\367\1\370\5\0\2\367\1\0\3\367\2\0\1\371"+
    "\60\0\1\372\13\0\1\372\47\0\1\373\37\0\1\373"+
    "\105\0\1\374\112\0\1\375\112\0\1\376\13\0\1\376"+
    "\54\0\1\377\33\0\1\377\103\0\1\u0100\73\0\1\u0101"+
    "\136\0\1\u0102\55\0\2\u0103\111\0\1\220\15\0\1\220"+
    "\2\0\2\220\61\0\1\220\7\0\1\220\10\0\4\220"+
    "\1\0\1\220\1\0\3\220\1\0\1\220\20\0\2\220"+
    "\32\0\1\226\1\227\1\230\1\233\1\0\2\233\1\154"+
    "\1\155\1\u0104\2\233\1\230\4\233\1\230\6\233\1\156"+
    "\1\233\1\0\5\233\5\0\6\233\2\0\6\233\6\0"+
    "\2\233\1\0\1\233\2\230\7\0\1\231\1\153\4\0"+
    "\1\226\1\227\1\230\1\233\1\0\2\233\1\154\1\155"+
    "\3\233\1\230\4\233\1\230\6\233\1\156\1\233\1\0"+
    "\5\233\5\0\6\233\2\0\6\233\6\0\2\233\1\0"+
    "\1\233\2\230\1\0\1\362\5\0\1\231\1\153\6\0"+
    "\2\322\1\0\2\322\2\0\17\322\1\0\1\322\1\0"+
    "\5\322\5\0\6\322\2\0\6\322\6\0\2\322\1\0"+
    "\3\322\20\0\1\324\7\0\1\324\15\0\1\324\2\0"+
    "\2\324\1\0\1\325\21\0\1\325\4\0\1\326\30\0"+
    "\1\u0105\3\0\1\u0106\3\0\1\u0105\15\0\1\u0105\2\0"+
    "\2\u0105\2\0\1\u0106\104\0\1\u0107\2\0\1\u0107\62\0"+
    "\1\u0108\7\0\1\u0108\10\0\4\u0108\1\0\1\u0108\1\0"+
    "\3\u0108\1\0\1\u0108\20\0\2\u0108\34\0\2\331\1\0"+
    "\2\331\2\0\17\331\1\0\1\331\1\0\5\331\5\0"+
    "\6\331\2\0\6\331\3\0\1\u0109\2\0\2\331\1\0"+
    "\3\331\17\0\2\332\1\0\2\332\2\0\17\332\1\0"+
    "\1\332\1\0\5\332\5\0\6\332\2\0\6\332\6\0"+
    "\2\332\1\0\3\332\17\0\2\332\1\0\2\332\2\0"+
    "\16\332\1\u010a\1\0\1\332\1\0\5\332\5\0\1\332"+
    "\1\u010b\4\332\2\0\5\332\1\u010b\6\0\2\332\1\0"+
    "\3\332\17\0\2\332\1\0\2\332\2\0\17\332\1\0"+
    "\1\332\1\0\4\332\1\u010c\5\0\6\332\2\0\4\332"+
    "\1\u010c\1\332\6\0\2\332\1\0\3\332\17\0\2\332"+
    "\1\0\2\332\2\0\1\332\1\u010d\15\332\1\0\1\332"+
    "\1\0\5\332\5\0\6\332\2\0\6\332\6\0\2\332"+
    "\1\0\3\332\17\0\2\332\1\0\2\332\2\0\7\332"+
    "\1\u010e\7\332\1\0\1\332\1\0\5\332\5\0\6\332"+
    "\2\0\6\332\6\0\2\332\1\0\3\332\17\0\2\332"+
    "\1\0\2\332\2\0\17\332\1\0\1\332\1\0\4\332"+
    "\1\u010f\5\0\6\332\2\0\4\332\1\u010f\1\332\6\0"+
    "\2\332\1\0\3\332\17\0\2\332\1\0\2\332\2\0"+
    "\3\332\2\u0110\12\332\1\0\1\332\1\0\5\332\5\0"+
    "\6\332\2\0\6\332\6\0\2\332\1\0\3\332\17\0"+
    "\2\332\1\0\2\332\2\0\16\332\1\u0111\1\0\1\332"+
    "\1\0\5\332\5\0\6\332\2\0\6\332\6\0\2\332"+
    "\1\0\3\332\36\0\2\u0112\114\0\1\u0113\33\0\1\u0113"+
    "\72\0\1\u0114\57\0\1\251\2\0\2\251\2\0\2\251"+
    "\1\0\14\251\3\0\1\251\2\0\2\251\5\0\6\251"+
    "\2\0\6\251\4\0\1\252\1\0\2\251\1\0\3\251"+
    "\103\0\1\u0115\27\0\2\347\1\0\2\347\2\0\17\347"+
    "\1\0\1\347\1\252\5\347\5\0\6\347\2\0\6\347"+
    "\2\0\1\u0116\2\0\1\u0117\2\347\1\0\3\347\17\0"+
    "\2\350\1\0\2\350\2\0\17\350\1\0\1\350\1\0"+
    "\5\350\5\0\6\350\2\0\6\350\6\0\2\350\1\0"+
    "\3\350\20\0\1\u0118\1\0\7\u0118\1\0\4\u0118\1\0"+
    "\6\u0118\1\0\1\u0118\1\0\5\u0118\5\0\6\u0118\2\0"+
    "\6\u0118\6\0\2\u0118\1\0\1\u0118\22\0\1\154\1\0"+
    "\3\154\1\155\1\u0119\2\154\1\0\1\154\1\u011a\2\154"+
    "\1\0\6\154\1\156\1\154\1\0\5\154\5\0\6\154"+
    "\2\0\1\154\1\u011a\4\154\6\0\2\154\1\0\1\154"+
    "\12\0\1\153\7\0\1\154\1\0\3\154\1\155\3\154"+
    "\1\0\1\154\1\u011b\2\154\1\0\6\154\1\156\1\154"+
    "\1\0\5\154\5\0\6\154\2\0\1\154\1\u011b\4\154"+
    "\6\0\2\154\1\0\1\154\12\0\1\153\30\0\1\u011c"+
    "\72\0\1\154\1\0\3\154\1\155\3\154\1\0\4\154"+
    "\1\0\2\154\1\u011d\3\154\1\156\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\6\154\6\0\2\154\1\0\1\154"+
    "\12\0\1\153\32\0\1\u011e\31\0\1\u011e\36\0\1\154"+
    "\1\0\3\154\1\155\3\154\1\0\4\154\1\0\4\154"+
    "\1\u011f\1\154\1\156\1\154\1\0\5\154\5\0\6\154"+
    "\2\0\3\154\1\u011f\2\154\6\0\2\154\1\0\1\154"+
    "\12\0\1\153\7\0\1\360\1\0\1\262\1\360\2\262"+
    "\3\360\1\0\4\360\1\0\6\360\1\156\1\360\1\0"+
    "\5\360\5\0\6\360\2\0\6\360\6\0\2\360\1\0"+
    "\1\360\22\0\1\154\1\0\3\154\1\155\3\154\1\u0120"+
    "\1\264\3\154\1\0\6\154\1\156\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\6\154\6\0\2\154\1\0\1\154"+
    "\3\0\1\362\6\0\1\153\34\0\1\u0121\74\0\1\266"+
    "\113\0\1\272\113\0\1\275\102\0\1\u0122\1\u0123\2\367"+
    "\1\0\2\367\2\0\17\367\1\0\1\367\1\0\5\367"+
    "\5\0\6\367\2\0\6\367\6\0\2\367\1\0\3\367"+
    "\17\0\1\u0124\2\0\2\u0124\2\0\2\u0124\1\0\14\u0124"+
    "\3\0\1\u0124\2\0\2\u0124\5\0\6\u0124\2\0\6\u0124"+
    "\6\0\2\u0124\1\0\3\u0124\17\0\1\u0125\2\0\2\u0125"+
    "\2\0\2\u0125\1\0\14\u0125\3\0\1\u0125\2\0\2\u0125"+
    "\5\0\6\u0125\2\0\6\u0125\6\0\2\u0125\1\0\3\u0125"+
    "\36\0\2\u0126\70\0\1\u0127\37\0\1\u0128\21\0\1\u0128"+
    "\6\0\1\u0129\56\0\1\u012a\107\0\1\u012b\113\0\1\u012c"+
    "\113\0\1\u012d\104\0\1\u012e\113\0\1\u0127\132\0\1\u012f"+
    "\21\0\1\u012f\71\0\1\u012b\21\0\1\u012b\32\0\1\226"+
    "\1\227\1\230\1\233\1\0\2\233\1\154\1\155\3\233"+
    "\1\u0130\1\321\3\233\1\230\6\233\1\156\1\233\1\0"+
    "\5\233\5\0\6\233\2\0\6\233\6\0\2\233\1\0"+
    "\1\233\2\230\1\0\1\362\5\0\1\231\1\153\7\0"+
    "\1\u0105\7\0\1\u0105\15\0\1\u0105\2\0\2\u0105\30\0"+
    "\1\326\30\0\1\u0105\7\0\1\u0105\15\0\1\u0105\2\0"+
    "\2\u0105\107\0\1\u0107\2\0\1\u0107\31\0\1\326\30\0"+
    "\1\u0108\7\0\1\u0108\10\0\4\u0108\1\0\1\u0108\1\0"+
    "\3\u0108\1\0\1\u0108\20\0\2\u0108\4\0\1\326\27\0"+
    "\2\332\1\0\2\332\2\0\17\332\1\0\1\332\1\0"+
    "\5\332\5\0\1\332\1\u0131\4\332\2\0\5\332\1\u0131"+
    "\6\0\2\332\1\0\3\332\17\0\2\332\1\0\2\332"+
    "\2\0\17\332\1\0\1\332\1\0\5\332\5\0\2\332"+
    "\1\u0132\3\332\2\0\6\332\6\0\2\332\1\0\3\332"+
    "\17\0\2\332\1\0\2\332\2\0\17\332\1\0\1\332"+
    "\1\0\4\332\1\u0133\5\0\6\332\2\0\4\332\1\u0133"+
    "\1\332\6\0\2\332\1\0\3\332\17\0\2\332\1\0"+
    "\2\332\2\0\17\332\1\0\1\332\1\0\5\332\5\0"+
    "\1\332\1\u0134\4\332\2\0\5\332\1\u0134\6\0\2\332"+
    "\1\0\3\332\17\0\2\332\1\0\2\332\2\0\17\332"+
    "\1\0\1\332\1\0\5\332\5\0\2\332\1\u0135\3\332"+
    "\2\0\6\332\6\0\2\332\1\0\3\332\17\0\2\332"+
    "\1\0\2\332\2\0\5\332\1\u0136\11\332\1\0\1\332"+
    "\1\0\5\332\5\0\6\332\2\0\1\332\1\u0136\4\332"+
    "\6\0\2\332\1\0\3\332\17\0\2\332\1\0\2\332"+
    "\2\0\17\332\1\0\1\332\1\0\4\332\1\u0137\5\0"+
    "\6\332\2\0\4\332\1\u0137\1\332\6\0\2\332\1\0"+
    "\3\332\17\0\2\332\1\0\2\332\2\0\17\332\1\0"+
    "\1\332\1\0\5\332\5\0\1\332\1\u0133\4\332\2\0"+
    "\5\332\1\u0133\6\0\2\332\1\0\3\332\40\0\1\u0138"+
    "\33\0\1\u0138\46\0\1\u0139\3\0\1\u013a\37\0\1\u013a"+
    "\64\0\1\u013b\116\0\1\345\147\0\1\u013c\112\0\1\346"+
    "\31\0\1\154\1\0\3\154\1\155\2\154\1\u011d\1\u011c"+
    "\1\u011d\3\154\1\0\6\154\1\156\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\6\154\6\0\2\154\1\0\1\154"+
    "\12\0\1\153\7\0\1\154\1\0\3\154\1\155\3\154"+
    "\1\0\2\154\1\u013d\1\154\1\0\6\154\1\156\1\154"+
    "\1\0\5\154\5\0\6\154\2\0\6\154\6\0\2\154"+
    "\1\0\1\154\12\0\1\153\7\0\1\154\1\0\3\154"+
    "\1\155\3\154\1\0\4\154\1\0\2\154\1\u013e\3\154"+
    "\1\156\1\154\1\0\5\154\5\0\6\154\2\0\6\154"+
    "\6\0\2\154\1\0\1\154\12\0\1\153\32\0\1\u011c"+
    "\31\0\1\u011c\36\0\1\154\1\0\3\154\1\155\3\154"+
    "\1\0\4\154\1\0\4\154\1\u011d\1\154\1\156\1\154"+
    "\1\0\5\154\5\0\6\154\2\0\3\154\1\u011d\2\154"+
    "\6\0\2\154\1\0\1\154\12\0\1\153\104\0\1\362"+
    "\43\0\1\u013f\64\0\1\u0123\114\0\2\u0124\1\0\2\u0124"+
    "\2\0\17\u0124\1\0\1\u0124\1\0\5\u0124\5\0\6\u0124"+
    "\2\0\6\u0124\1\u0140\5\0\2\u0124\1\0\3\u0124\17\0"+
    "\2\u0125\1\0\2\u0125\2\0\17\u0125\1\0\1\u0125\1\0"+
    "\5\u0125\5\0\6\u0125\2\0\6\u0125\6\0\2\u0125\1\0"+
    "\3\u0125\2\0\1\u0140\35\0\1\u0141\33\0\1\u0141\33\0"+
    "\1\u0127\70\0\1\u0129\70\0\1\u0142\66\0\1\u0143\111\0"+
    "\1\u0127\37\0\1\u0127\106\0\1\u0127\110\0\1\u012c\13\0"+
    "\1\u012c\30\0\1\u0127\37\0\1\u0144\21\0\1\u0144\6\0"+
    "\1\u0129\47\0\1\u012b\67\0\1\226\1\227\2\230\1\0"+
    "\2\230\2\0\17\230\1\0\1\230\1\0\5\230\5\0"+
    "\6\230\2\0\6\230\6\0\2\230\1\0\3\230\1\0"+
    "\1\362\5\0\1\231\7\0\2\332\1\0\2\332\2\0"+
    "\16\332\1\u0145\1\0\1\332\1\0\5\332\5\0\6\332"+
    "\2\0\6\332\6\0\2\332\1\0\3\332\17\0\2\332"+
    "\1\0\2\332\2\0\1\u0146\16\332\1\0\1\332\1\0"+
    "\5\332\5\0\6\332\2\0\6\332\6\0\2\332\1\0"+
    "\3\332\17\0\2\332\1\0\2\332\2\0\17\332\1\0"+
    "\1\332\1\0\5\332\5\0\2\332\1\u0147\3\332\2\0"+
    "\6\332\6\0\2\332\1\0\3\332\17\0\2\332\1\0"+
    "\2\332\2\0\17\332\1\0\1\332\1\0\1\u0148\4\332"+
    "\5\0\6\332\2\0\6\332\6\0\2\332\1\0\3\332"+
    "\17\0\2\332\1\0\2\332\2\0\17\332\1\0\1\332"+
    "\1\0\5\332\5\0\3\332\1\u0149\2\332\2\0\6\332"+
    "\6\0\2\332\1\0\3\332\17\0\2\332\1\0\2\332"+
    "\2\0\3\332\2\u014a\12\332\1\0\1\332\1\0\5\332"+
    "\5\0\6\332\2\0\6\332\6\0\2\332\1\0\3\332"+
    "\110\0\2\u014b\56\0\1\u014c\21\0\1\u014c\71\0\1\u014d"+
    "\21\0\1\u014d\51\0\1\u014e\126\0\1\252\35\0\1\u0117"+
    "\26\0\1\154\1\0\3\154\1\155\3\154\1\0\3\154"+
    "\1\u011d\1\0\6\154\1\156\1\154\1\0\5\154\5\0"+
    "\6\154\2\0\6\154\6\0\2\154\1\0\1\154\12\0"+
    "\1\153\7\0\1\154\1\0\3\154\1\155\1\154\1\u011d"+
    "\1\154\1\0\4\154\1\0\6\154\1\156\1\154\1\0"+
    "\5\154\5\0\6\154\2\0\6\154\6\0\2\154\1\0"+
    "\1\154\12\0\1\153\7\0\11\u014f\1\0\4\u014f\1\0"+
    "\10\u014f\1\0\6\u014f\1\0\2\u014f\1\0\16\u014f\1\0"+
    "\1\u014f\4\0\2\u014f\1\0\1\u014f\2\0\2\u014f\5\0"+
    "\3\u014f\3\0\1\u0122\1\u0123\157\0\1\u0127\105\0\1\u0150"+
    "\21\0\1\u0150\71\0\1\u0127\21\0\1\u0127\61\0\1\u0151"+
    "\66\0\2\332\1\0\2\332\2\0\6\332\1\u0152\10\332"+
    "\1\0\1\332\1\0\5\332\5\0\6\332\2\0\6\332"+
    "\6\0\2\332\1\0\3\332\17\0\2\332\1\0\2\332"+
    "\2\0\17\332\1\0\1\332\1\0\4\332\1\u0153\5\0"+
    "\6\332\2\0\4\332\1\u0153\1\332\6\0\2\332\1\0"+
    "\3\332\17\0\2\332\1\0\2\332\2\0\17\332\1\0"+
    "\1\332\1\0\5\332\5\0\6\332\2\0\6\332\6\0"+
    "\1\u0154\1\332\1\0\3\332\17\0\2\332\1\0\2\332"+
    "\2\0\16\332\1\u0155\1\0\1\332\1\0\5\332\5\0"+
    "\6\332\2\0\6\332\6\0\2\332\1\0\3\332\17\0"+
    "\2\332\1\0\2\332\2\0\17\332\1\0\1\332\1\0"+
    "\5\332\5\0\1\332\1\u0156\4\332\2\0\5\332\1\u0156"+
    "\6\0\2\332\1\0\3\332\63\0\1\u0157\13\0\1\u0157"+
    "\77\0\1\u0158\13\0\1\u0158\42\0\1\u0159\105\0\1\u015a"+
    "\2\u014f\1\u015a\2\u014f\3\u015a\1\0\4\u015a\1\0\10\u015a"+
    "\1\0\5\u015a\1\u014f\1\0\2\u014f\1\0\6\u015a\2\u014f"+
    "\6\u015a\1\0\1\u014f\4\0\2\u015a\1\0\1\u015a\2\0"+
    "\2\u014f\5\0\3\u014f\51\0\1\u0127\13\0\1\u0127\54\0"+
    "\1\u0127\33\0\1\u0127\36\0\2\332\1\0\2\332\2\0"+
    "\17\332\1\0\1\332\1\0\5\332\5\0\1\332\1\u015b"+
    "\4\332\2\0\5\332\1\u015b\6\0\2\332\1\0\3\332"+
    "\17\0\2\332\1\0\2\332\2\0\3\332\2\u0133\12\332"+
    "\1\0\1\332\1\0\5\332\5\0\6\332\2\0\6\332"+
    "\6\0\2\332\1\0\3\332\17\0\2\332\1\0\2\332"+
    "\2\0\7\332\1\u0152\7\332\1\0\1\332\1\0\5\332"+
    "\5\0\6\332\2\0\6\332\6\0\2\332\1\0\3\332"+
    "\17\0\2\332\1\0\2\332\2\0\12\332\1\u0133\4\332"+
    "\1\0\1\332\1\0\5\332\5\0\6\332\2\0\2\332"+
    "\1\u0133\3\332\6\0\2\332\1\0\3\332\36\0\2\u015c"+
    "\114\0\1\u015d\33\0\1\u015d\54\0\1\u015e\75\0\2\332"+
    "\1\0\2\332\2\0\5\332\1\u015f\11\332\1\0\1\332"+
    "\1\0\5\332\5\0\6\332\2\0\1\332\1\u015f\4\332"+
    "\6\0\2\332\1\0\3\332\33\0\1\u0160\37\0\1\u0160"+
    "\64\0\1\u0161\123\0\1\u014b\21\0\1\u014b\34\0\2\332"+
    "\1\0\2\332\2\0\17\332\1\0\1\332\1\0\5\332"+
    "\5\0\4\332\1\u0162\1\332\2\0\6\332\6\0\2\332"+
    "\1\0\3\332\42\0\1\u0163\106\0\1\u014b\75\0\2\332"+
    "\1\0\2\332\1\u0164\1\0\17\332\1\0\1\332\1\0"+
    "\5\332\5\0\6\332\2\0\6\332\6\0\2\332\1\0"+
    "\3\332\64\0\1\u0165\112\0\1\u0166\13\0\1\u0166\6\0"+
    "\1\u0167\46\0\1\u014b\126\0\1\u0168\21\0\1\u0168\100\0"+
    "\1\u0169\13\0\1\u0169\60\0\1\u016a\105\0\2\u016b\116\0"+
    "\1\u016c\104\0\1\u016d\37\0\1\u016d\74\0\1\u016c\21\0"+
    "\1\u016c\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\26\0\1\11\2\1\1\11\1\1\1\11\5\1\2\11"+
    "\2\1\1\11\4\1\1\11\1\1\1\11\2\1\3\11"+
    "\2\1\1\11\14\1\1\11\1\1\5\11\2\1\2\11"+
    "\16\1\1\11\1\1\3\11\7\1\1\11\2\1\10\0"+
    "\1\11\1\1\2\0\1\11\1\1\1\0\2\1\2\0"+
    "\1\1\4\0\1\11\1\1\12\0\1\1\1\0\6\11"+
    "\1\1\1\11\6\0\1\11\12\0\1\1\14\0\1\11"+
    "\1\0\1\1\1\0\2\11\1\0\1\11\1\1\1\0"+
    "\1\11\2\1\13\0\2\1\2\0\1\1\1\11\2\0"+
    "\1\11\3\0\10\1\6\0\1\1\7\0\1\1\3\0"+
    "\1\11\24\0\1\11\10\1\3\0\1\1\2\0\2\1"+
    "\2\0\1\11\1\1\4\0\1\1\1\11\5\0\1\11"+
    "\7\0\7\1\15\0\6\1\1\11\6\0\5\1\3\0"+
    "\2\1\3\0\1\1\2\0\1\1\11\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private final static Set<String> PSEUDO_TYPES;
  private Stack<String> docLabels = new Stack<String>();
  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }

  static {
    PSEUDO_TYPES = new HashSet<String>(Arrays.asList(
        new String[] {
            "string", "integer", "int", "boolean", "bool", "float", "double",
            "object", "mixed", "array", "resource", "void", "null", "callback",
            "false", "true", "self", "callable"
        }
    ));
  }

  private void writeDocTag() throws IOException {
    out.write(yycharat(0));
    out.write("<strong>");
    out.write(Util.htmlize(yytext().substring(1)));
    out.write("</strong>");
  }

  private boolean isTabOrSpace(int i) {
    return yycharat(i) == '\t' || yycharat(i) == ' ';
  }

  private static boolean isHtmlState(int state) {
    return state == TAG_NAME            || state == AFTER_TAG_NAME
        || state == ATTRIBUTE_NOQUOTE   || state == ATTRIBUTE_SINGLE
        || state == ATTRIBUTE_DOUBLE    || state == HTMLCOMMENT
        || state == YYINITIAL;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpXref(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { writeUnicodeChar(yycharat(0));
            }
          case 69: break;
          case 2: 
            { out.write(yytext());
            }
          case 70: break;
          case 3: 
            { startNewLine();
            }
          case 71: break;
          case 4: 
            { out.write(yycharat(0));
            }
          case 72: break;
          case 5: 
            { out.write(Util.htmlize(yytext())); yypush(TAG_NAME, null);
            }
          case 73: break;
          case 6: 
            { out.write( "&gt;");
            }
          case 74: break;
          case 7: 
            { out.write( "&amp;");
            }
          case 75: break;
          case 8: 
            { out.write("<span class=\"n\">");
        out.write(yytext());
        out.write("</span>");
        yybegin(AFTER_TAG_NAME);
            }
          case 76: break;
          case 9: 
            { out.write( "&lt;");
            }
          case 77: break;
          case 10: 
            { out.write("&gt;"); yypop();
            }
          case 78: break;
          case 11: 
            { out.write("<strong>");
        out.write(yytext()); //attribute
        out.write("</strong>");
            }
          case 79: break;
          case 12: 
            { char attributeDelim = yycharat(yylength()-1);
        out.write("=<span class=\"s\">");
        out.write(yytext().substring(1));
        if (attributeDelim == '\'') {
            yypush(ATTRIBUTE_SINGLE, null);
        } else if (attributeDelim == '"') {
            yypush(ATTRIBUTE_DOUBLE, null);
        } else {
            yypush(ATTRIBUTE_NOQUOTE, null);
        }
            }
          case 80: break;
          case 13: 
            { out.write(yytext());
        out.write("</span>");
        yypop();
            }
          case 81: break;
          case 14: 
            { out.write("</span>");
        startNewLine();
        yypop();
            }
          case 82: break;
          case 15: 
            { out.write("&gt;</span>"); yypop(); yypop();
            }
          case 83: break;
          case 16: 
            { out.write("</span>");
        startNewLine();
        out.write("<span class=\"s\">");
            }
          case 84: break;
          case 17: 
            { out.write("'</span>"); yypop();
            }
          case 85: break;
          case 18: 
            { out.write("\"</span>"); yypop();
            }
          case 86: break;
          case 19: 
            { out.write("</span>");
        startNewLine();
        out.write("<span class=\"c\">");
            }
          case 87: break;
          case 20: 
            { writeSymbol(yytext(), Consts.kwd, yyline);
            }
          case 88: break;
          case 21: 
            { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
            }
          case 89: break;
          case 22: 
            { yypush(QSTRING, null);
        if (yycharat(0) == 'b') { out.write('b'); }
        out.write("<span class=\"s\">\'");
            }
          case 90: break;
          case 23: 
            { yypush(STRING, null);
        if (yycharat(0) == 'b') { out.write('b'); }
        out.write("<span class=\"s\">\"");
            }
          case 91: break;
          case 24: 
            { yypush(BACKQUOTE, null); out.write("<span class=\"s\">`");
            }
          case 92: break;
          case 25: 
            { yypush(SCOMMENT, null); out.write("<span class=\"c\">" + yytext());
            }
          case 93: break;
          case 26: 
            { out.write(yytext()); yypush(IN_SCRIPT, null);
            }
          case 94: break;
          case 27: 
            { out.write(yytext());
        if (!this.stack.empty() && !isHtmlState(this.stack.peek()))
            yypop(); //may pop STRINGEXPR/HEREDOC/BACKQUOTE
        /* we don't pop unconditionally because we can exit a <?php block with
         * with open braces and we discard the information about the number of
         * open braces when exiting the block (see the action for {ClosingTag}
         * below. An alternative would be keeping two stacks -- one for HTML
         * and another for PHP. The PHP scanner only needs one stack because
         * it doesn't need to keep state about the HTML */
            }
          case 95: break;
          case 28: 
            { out.write("</span>");
    startNewLine();
    out.write("<span class=\"s\">");
            }
          case 96: break;
          case 29: 
            { out.write("</span>$");
        yypush(STRINGVAR, "<span class=\"s\">");
            }
          case 97: break;
          case 30: 
            { out.write("`</span>"); yypop();
            }
          case 98: break;
          case 31: 
            { writeSymbol(yytext(), null, yyline);
            }
          case 99: break;
          case 32: 
            { out.write('['); yybegin(IN_SCRIPT);
            }
          case 100: break;
          case 33: 
            { out.write('}'); yypop();
            }
          case 101: break;
          case 34: 
            { yypushback(1); yypop();
            }
          case 102: break;
          case 35: 
            { yybegin(DOCCOMMENT); yypushback(1);
            }
          case 103: break;
          case 36: 
            { out.write("<strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        yypush(IN_SCRIPT, null);
            }
          case 104: break;
          case 37: 
            { out.write("</span><strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        yypush(IN_SCRIPT, "<span class=\"s\">");
            }
          case 105: break;
          case 38: 
            { out.write("</span><strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        yypush(IN_SCRIPT, "<span class=\"c\">");
            }
          case 106: break;
          case 39: 
            { yypush(COMMENT, null); out.write("<span class=\"c\">/*");
            }
          case 107: break;
          case 40: 
            { out.write("<strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        while (!isHtmlState(yystate()))
            yypop();
            }
          case 108: break;
          case 41: 
            { //we ignore keywords if the identifier starts with one of variable chars
        String id = yytext().substring(1);
        out.write("$");
        writeSymbol(id, null, yyline);
            }
          case 109: break;
          case 42: 
            { out.write("<strong>");
        out.write(yytext());
        out.write("</strong>");
            }
          case 110: break;
          case 43: 
            { out.write("<strong>"); out.write(yytext()); out.write("</strong>");
            }
          case 111: break;
          case 44: 
            { out.write("</span>");
        out.write(yytext());
        yypush(STRINGEXPR, "<span class=\"s\">");
            }
          case 112: break;
          case 45: 
            { out.write("</span>");
        out.write("{");
        yypushback(1);
        yypush(IN_SCRIPT, "<span class=\"s\">");
            }
          case 113: break;
          case 46: 
            { out.write("</span><strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        while (!isHtmlState(yystate()))
            yypop();
            }
          case 114: break;
          case 47: 
            { int i = yylength() - 1;
    boolean hasSemi = false;
    while (yycharat(i) == '\n' || yycharat(i) == '\r') { i--; }
    if (yycharat(i) == ';') { hasSemi = true; i--; }
    if (yytext().substring(0, i+1).equals(this.docLabels.peek())) {
        String text = this.docLabels.pop();
        yypop();
        out.write("</span><span class=\"b\">");
        out.write(text);
        out.write("</span>");
        if (hasSemi) out.write(";");
        startNewLine();
    } else {
        out.write(yytext().substring(0,i+1));
        if (hasSemi) out.write(";");
        startNewLine();
    }
            }
          case 115: break;
          case 48: 
            { out.write("*/</span>"); yypop();
            }
          case 116: break;
          case 49: 
            { int i = 0;
        do { out.write(yycharat(i++)); } while (isTabOrSpace(i));
        int j = i;
        while (i < yylength()) {
            //skip over [], |, ( and )
            char c;
            while (i < yylength() && ((c = yycharat(i)) == '[' || c == ']'
                    || c == '|' || c == '(' || c == ')')) {
                out.write(c);
                i++;
            }
            j = i;
            while (j < yylength() && (c = yycharat(j)) != ')' && c != '|'
            && c != '[') { j++; }
            out.write("<em>");
            writeSymbol(Util.htmlize(yytext().substring(i, j)),
                    PSEUDO_TYPES, yyline, false);
            out.write("</em>");
            i = j;
        }
        yybegin(yystate() == DOCCOM_TYPE_THEN_NAME ? DOCCOM_NAME : DOCCOMMENT);
            }
          case 117: break;
          case 50: 
            { out.write("<span class=\"n\">");
        int i = 0;
        while (yycharat(i) != ':') i++;
        out.write(yytext().substring(0,i));
        out.write("</span>:<span class=\"n\">");
        out.write(yytext().substring(i + 1));
        out.write("</span>");
        yybegin(AFTER_TAG_NAME);
            }
          case 118: break;
          case 51: 
            { out.write("--&gt;</span>");
        yybegin(YYINITIAL);
            }
          case 119: break;
          case 52: 
            { yypush(DOCCOMMENT, null); out.write("<span class=\"c\">/*"); yypushback(1);
            }
          case 120: break;
          case 53: 
            { out.write("-&gt;");
        writeSymbol(yytext().substring(2), null, yyline);
        yypop(); //because "$arr->a[0]" is the same as $arr->a . "[0]"
            }
          case 121: break;
          case 54: 
            { //then the identifier is actually a string!
        out.write("[<span class=\"s\">");
        out.write(yytext().substring(1, yylength()-1));
        out.write("</span>]");
        yypop();
            }
          case 122: break;
          case 55: 
            { out.write("[<span class=\"n\">");
        out.write(yytext().substring(1, yylength()-1));
        out.write("</span>]");
        yypop(); //because "$arr[0][1]" is the same as $arr[0] . "[1]"
            }
          case 123: break;
          case 56: 
            { writeDocTag();
            }
          case 124: break;
          case 57: 
            { int i = 0;
        do { out.write(yycharat(i++)); } while (isTabOrSpace(i));

        out.write("<em>$");
        writeSymbol(Util.htmlize(yytext().substring(i + 1)), null, yyline);
        out.write("</em>");
        yybegin(DOCCOMMENT);
            }
          case 125: break;
          case 58: 
            { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
            }
          case 126: break;
          case 59: 
            { out.write("<span class=\"c\">&lt;!--");
        yybegin(HTMLCOMMENT);
            }
          case 127: break;
          case 60: 
            { out.write("[$");
        writeSymbol(yytext().substring(2, yylength()-1), null, yyline);
        out.write("]");
        yypop();
            }
          case 128: break;
          case 61: 
            { writeEMailAddress(yytext());
            }
          case 129: break;
          case 62: 
            { String path = yytext();
            out.write("<a href=\""+urlPrefix+"path=");
            out.write(path);
            appendProject();
            out.write("\">");
            out.write(path);
            out.write("</a>");
            }
          case 130: break;
          case 63: 
            { if (yycharat(0) == 'b') { out.write('b'); }
        out.write("&lt;&lt;&lt;");
        int i = yycharat(0) == 'b' ? 4 : 3, j = yylength()-1;
        while (isTabOrSpace(i)) {
            out.write(yycharat(i++));
        }
        while (yycharat(j) == '\n' || yycharat(j) == '\r') { j--; }

        if (yycharat(i) == '\'' || yycharat(i) == '"') {
            yypush(NOWDOC, null);
            String text = yytext().substring(i+1, j);
            this.docLabels.push(text);
            out.write(yycharat(i));
            out.write("<span class=\"b\">");
            out.write(text);
            out.write("</span>");
            out.write(yycharat(i));
        } else {
            yypush(HEREDOC, null);
            String text = yytext().substring(i, j+1);
            this.docLabels.push(text);
            out.write("<span class=\"b\">");
            out.write(text);
            out.write("</span>");
        }
        startNewLine();
        out.write("<span class=\"s\">");
            }
          case 131: break;
          case 64: 
            { out.write("(");
        int i = 1, j;
        while (isTabOrSpace(i)) { out.write(yycharat(i++)); }

        out.write("<em>");
        j = i + 1;
        while (!isTabOrSpace(j) && yycharat(j) != ')') { j++; }
        out.write(yytext().substring(i, j));
        out.write("</em>");

        out.write(yytext().substring(j, yylength()));
            }
          case 132: break;
          case 65: 
            { writeDocTag(); yybegin(DOCCOM_TYPE);
            }
          case 133: break;
          case 66: 
            { writeDocTag(); yybegin(DOCCOM_NAME);
            }
          case 134: break;
          case 67: 
            { writeDocTag(); yybegin(DOCCOM_TYPE_THEN_NAME);
            }
          case 135: break;
          case 68: 
            { String url = yytext();
            out.write("<a href=\"");
            out.write(url);out.write("\">");
            out.write(url);out.write("</a>");
            }
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
